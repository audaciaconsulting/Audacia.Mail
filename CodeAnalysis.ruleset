<?xml version="1.0" encoding="utf-8"?>
<RuleSet Name="Default Rules" ToolsVersion="15.0">

	<Rules AnalyzerId="Roslynator.CSharp.Analyzers" RuleNamespace="Roslynator.CSharp.Analyzers">
		<Rule Id="RCS1001" Action="Warning"/><!-- [STYLE] Add braces (when expression spans over multiple lines) -->
		<Rule Id="RCS1002" Action="None"/><!-- [STYLE] Remove braces -->
		<Rule Id="RCS1003" Action="Warning"/><!-- [STYLE] Add braces to if-else (when expression spans over multiple lines) -->
		<Rule Id="RCS1004" Action="None"/><!-- [STYLE] Remove braces from if-else -->
		<Rule Id="RCS1005" Action="Warning"/><!-- [SIMPLIFICATION] Simplify nested using statement -->
		<Rule Id="RCS1006" Action="Warning"/><!-- [SIMPLIFICATION] Merge else clause with nested if statement -->
		<Rule Id="RCS1007" Action="Warning"/><!-- [STYLE] Add braces -->
		<Rule Id="RCS1008" Action="None"/><!-- [READABILITY] Use explicit type instead of 'var' (when the type is not obvious) -->
		<Rule Id="RCS1009" Action="None"/><!-- [READABILITY] Use explicit type instead of 'var' (foreach variable) -->
		<Rule Id="RCS1010" Action="Warning"/><!-- [SIMPLIFICATION] Use 'var' instead of explicit type (when the type is obvious) -->
		<Rule Id="RCS1012" Action="None"/><!-- [READABILITY] Use explicit type instead of 'var' (when the type is obvious) -->
		<Rule Id="RCS1013" Action="Warning"/><!-- [USAGE] Use predefined type -->
		<Rule Id="RCS1014" Action="None"/><!-- [READABILITY] Avoid implicitly-typed array -->
		<Rule Id="RCS1015" Action="Warning"/><!-- [MAINTAINABILITY] Use nameof operator -->
		<Rule Id="RCS1016" Action="Info"/><!-- [USAGE] Use expression-bodied member -->
		<Rule Id="RCS1017" Action="None"/><!-- [STYLE] Avoid multiline expression body -->
		<Rule Id="RCS1018" Action="Warning"/><!-- [READABILITY] Add default access modifier -->
		<Rule Id="RCS1019" Action="Warning"/><!-- [READABILITY] Order modifiers -->
		<Rule Id="RCS1020" Action="Warning"/><!-- [SIMPLIFICATION] Simplify Nullable\<T> to T? -->
		<Rule Id="RCS1021" Action="Warning"/><!-- [SIMPLIFICATION] Simplify lambda expression -->
		<Rule Id="RCS1023" Action="None"/><!-- [FORMATTING] Format empty block -->
		<Rule Id="RCS1024" Action="Warning"/><!-- [FORMATTING] Format accessor list -->
		<Rule Id="RCS1025" Action="None"/><!-- [FORMATTING] Add new line before enum member -->
		<Rule Id="RCS1026" Action="Warning"/><!-- [FORMATTING] Add new line before statement -->
		<Rule Id="RCS1027" Action="None"/><!-- [FORMATTING] Add new line before embedded statement -->
		<Rule Id="RCS1028" Action="None"/><!-- [FORMATTING] Add new line after switch label -->
		<Rule Id="RCS1029" Action="None"/><!-- [FORMATTING] Format binary operator on next line -->
		<Rule Id="RCS1030" Action="Warning"/><!-- [FORMATTING] Add empty line after embedded statement -->
		<Rule Id="RCS1031" Action="Info"/><!-- [REDUNDANCY] Remove unnecessary braces -->
		<Rule Id="RCS1032" Action="Warning"/><!-- [REDUNDANCY] Remove redundant parentheses -->
		<Rule Id="RCS1033" Action="Warning"/><!-- [REDUNDANCY] Remove redundant boolean literal -->
		<Rule Id="RCS1034" Action="Warning"/><!-- [REDUNDANCY] Remove redundant 'sealed' modifier -->
		<Rule Id="RCS1035" Action="Warning"/><!-- [REDUNDANCY] Remove redundant comma in initializer -->
		<Rule Id="RCS1036" Action="Warning"/><!-- [REDUNDANCY] Remove redundant empty line -->
		<Rule Id="RCS1037" Action="Warning"/><!-- [REDUNDANCY] Remove trailing white-space -->
		<Rule Id="RCS1038" Action="Warning"/><!-- [REDUNDANCY] Remove empty statement -->
		<Rule Id="RCS1039" Action="Warning"/><!-- [REDUNDANCY] Remove argument list from attribute -->
		<Rule Id="RCS1040" Action="Warning"/><!-- [REDUNDANCY] Remove empty else clause -->
		<Rule Id="RCS1041" Action="Warning"/><!-- [REDUNDANCY] Remove empty initializer -->
		<Rule Id="RCS1042" Action="Warning"/><!-- [REDUNDANCY] Remove enum default underlying type -->
		<Rule Id="RCS1043" Action="Warning"/><!-- [REDUNDANCY] Remove 'partial' modifier from type with a single part -->
		<Rule Id="RCS1044" Action="Warning"/><!-- [MAINTAINABILITY] Remove original exception from throw statement -->
		<Rule Id="RCS1045" Action="Warning"/><!-- [NAMING] Rename private field according to camel case with underscore -->
		<Rule Id="RCS1046" Action="Warning"/><!-- [NAMING] Asynchronous method name should end with 'Async' -->
		<Rule Id="RCS1047" Action="Warning"/><!-- [NAMING] Non-asynchronous method name should not end with 'Async' -->
		<Rule Id="RCS1048" Action="Warning"/><!-- [USAGE] Use lambda expression instead of anonymous method -->
		<Rule Id="RCS1049" Action="Warning"/><!-- [SIMPLIFICATION] Simplify boolean comparison -->
		<Rule Id="RCS1050" Action="None"/><!-- [STYLE] Add argument list to object creation expression -->
		<Rule Id="RCS1051" Action="None"/><!-- [STYLE] Parenthesize condition in conditional expression -->
		<Rule Id="RCS1052" Action="None"/><!-- [READABILITY] Declare each attribute separately -->
		<Rule Id="RCS1055" Action="Warning"/><!-- [REDUNDANCY] Avoid semicolon at the end of declaration -->
		<Rule Id="RCS1056" Action="None"/><!-- [READABILITY] Avoid usage of using alias directive -->
		<Rule Id="RCS1057" Action="Warning"/><!-- [FORMATTING] Add empty line between declarations -->
		<Rule Id="RCS1058" Action="Warning"/><!-- [SIMPLIFICATION] Use compound assignment -->
		<Rule Id="RCS1059" Action="Warning"/><!-- [DESIGN] Avoid locking on publicly accessible instance -->
		<Rule Id="RCS1060" Action="None"/><!-- [MAINTAINABILITY] Declare each type in separate file -->
		<Rule Id="RCS1061" Action="Warning"/><!-- [SIMPLIFICATION] Merge if statement with nested if statement -->
		<Rule Id="RCS1062" Action="Warning"/><!-- [REDUNDANCY] Avoid interpolated string with no interpolation -->
		<Rule Id="RCS1063" Action="Warning"/><!-- [STYLE] Avoid usage of do statement to create an infinite loop -->
		<Rule Id="RCS1064" Action="Warning"/><!-- [STYLE] Avoid usage of for statement to create an infinite loop -->
		<Rule Id="RCS1065" Action="None"/><!-- [STYLE] Avoid usage of while statement to create an inifinite loop -->
		<Rule Id="RCS1066" Action="Warning"/><!-- [REDUNDANCY] Remove empty finally clause -->
		<Rule Id="RCS1067" Action="Warning"/><!-- [STYLE] Remove argument list from object creation expression -->
		<Rule Id="RCS1068" Action="Warning"/><!-- [SIMPLIFICATION] Simplify logical negation -->
		<Rule Id="RCS1069" Action="Warning"/><!-- [REDUNDANCY] Remove unnecessary case label -->
		<Rule Id="RCS1070" Action="Warning"/><!-- [REDUNDANCY] Remove redundant default switch section -->
		<Rule Id="RCS1071" Action="Warning"/><!-- [REDUNDANCY] Remove redundant base constructor call -->
		<Rule Id="RCS1072" Action="Warning"/><!-- [REDUNDANCY] Remove empty namespace declaration -->
		<Rule Id="RCS1073" Action="Warning"/><!-- [SIMPLIFICATION] Replace if statement with return statement -->
		<Rule Id="RCS1074" Action="Warning"/><!-- [REDUNDANCY] Remove redundant constructor -->
		<Rule Id="RCS1075" Action="Warning"/><!-- [DESIGN] Avoid empty catch clause that catches System.Exception -->
		<Rule Id="RCS1076" Action="None"/><!-- [FORMATTING] Format declaration braces -->
		<Rule Id="RCS1077" Action="Warning"/><!-- [PERFORMANCE] Optimize LINQ method call -->
		<Rule Id="RCS1078" Action="None"/><!-- [GENERAL] Use " instead of string.Empty -->
		<Rule Id="RCS1079" Action="Info"/><!-- [GENERAL] Throwing of new Not Implemented Exception -->
		<Rule Id="RCS1080" Action="None"/><!-- [PERFORMANCE] Use 'Count/Length' property instead of 'Any' method -->
		<Rule Id="RCS1081" Action="Warning"/><!-- [READABILITY] Split variable declaration -->
		<Rule Id="RCS1084" Action="Warning"/><!-- [SIMPLIFICATION] Use coalesce expression instead of conditional expression -->
		<Rule Id="RCS1085" Action="Warning"/><!-- [SIMPLIFICATION] Use auto-implemented property -->
		<Rule Id="RCS1086" Action="None"/><!-- [GENERAL] Use linefeed as newline -->
		<Rule Id="RCS1087" Action="Warning"/><!-- [GENERAL] Use carriage return + linefeed as newline -->
		<Rule Id="RCS1088" Action="None"/><!-- [GENERAL] Use space(s) instead of tab -->
		<Rule Id="RCS1089" Action="Warning"/><!-- [SIMPLIFICATION] Use -/++ operator instead of assignment -->
		<Rule Id="RCS1090" Action="Info"/><!-- [DESIGN] Call 'ConfigureAwait(false)' -->
		<Rule Id="RCS1091" Action="Warning"/><!-- [REDUNDANCY] Remove empty region -->
		<Rule Id="RCS1092" Action="Warning"/><!-- [FORMATTING] Add empty line before 'while' keyword in 'do' statement -->
		<Rule Id="RCS1093" Action="Warning"/><!-- [REDUNDANCY] Remove file with no code -->
		<Rule Id="RCS1094" Action="Warning"/><!-- [READABILITY] Declare using directive on top level -->
		<Rule Id="RCS1096" Action="Info"/><!-- [PERFORMANCE] Use bitwise operation instead of calling 'HasFlag' -->
		<Rule Id="RCS1097" Action="Warning"/><!-- [REDUNDANCY] Remove redundant 'ToString' call -->
		<Rule Id="RCS1098" Action="Warning"/><!-- [READABILITY] Avoid 'null' on the left side of a binary expression -->
		<Rule Id="RCS1099" Action="Warning"/><!-- [READABILITY] Default label should be the last label in a switch section -->
		<Rule Id="RCS1100" Action="None"/><!-- [FORMATTING] Format documentation summary on a single line -->
		<Rule Id="RCS1101" Action="None"/><!-- [FORMATTING] Format documentation summary on multiple lines -->
		<Rule Id="RCS1102" Action="Warning"/><!-- [DESIGN] Make class static -->
		<Rule Id="RCS1103" Action="Warning"/><!-- [SIMPLIFICATION] Replace if statement with assignment -->
		<Rule Id="RCS1104" Action="Warning"/><!-- [SIMPLIFICATION] Simplify conditional expression -->
		<Rule Id="RCS1105" Action="Warning"/><!-- [SIMPLIFICATION] Unncessary interpolation -->
		<Rule Id="RCS1106" Action="Warning"/><!-- [REDUNDANCY] Remove empty destructor -->
		<Rule Id="RCS1107" Action="Warning"/><!-- [REDUNDANCY] Remove redundant 'ToCharArray' call -->
		<Rule Id="RCS1108" Action="Warning"/><!-- [READABILITY] Add 'static' modifier to all partial class declarations -->
		<Rule Id="RCS1110" Action="Warning"/><!-- [DESIGN] Declare type inside namespace -->
	</Rules>

	<Rules AnalyzerId="Microsoft.CodeQuality.Analyzers" RuleNamespace="Microsoft.CodeQuality.Analyzers">
		<Rule Id="CA1000" Action="Warning" /><!-- [DESIGN] Do not declare static members on generic types -->
		<Rule Id="CA1001" Action="Warning" /><!-- [DESIGN] Types that own disposable fields should be disposable -->
		<Rule Id="CA1003" Action="Warning" /><!-- [DESIGN] Use generic event handler instances -->
		<Rule Id="CA1008" Action="Warning" /><!-- [DESIGN] Enums should have zero value -->
		<Rule Id="CA1010" Action="Warning" /><!-- [DESIGN] Collections should implement generic interface -->
		<Rule Id="CA1012" Action="Warning" /><!-- [DESIGN] Abstract types should not have constructors -->
		<Rule Id="CA1014" Action="Info" /><!-- [DESIGN] Mark assemblies with CLSCompliant -->
		<Rule Id="CA1016" Action="None" /><!-- [DESIGN] Mark assemblies with assembly version -->
		<Rule Id="CA1017" Action="None" /><!-- [DESIGN] Mark assemblies with ComVisible -->
		<Rule Id="CA1018" Action="Warning" /><!-- [DESIGN] Mark attributes with AttributeUsageAttribute -->
		<Rule Id="CA1019" Action="Warning" /><!-- [DESIGN] Define accessors for attribute arguments -->
		<Rule Id="CA1024" Action="Warning" /><!-- [DESIGN] Use properties where appropriate -->
		<Rule Id="CA1027" Action="None" /><!-- [DESIGN] Mark enums with FlagsAttribute -->
		<Rule Id="CA1028" Action="None" /><!-- [DESIGN] Enum Storage should be Int32 -->
		<Rule Id="CA1030" Action="None" /><!-- [DESIGN] Use events where appropriate -->
		<Rule Id="CA1031" Action="Warning" /><!-- [DESIGN] Do not catch general exception types -->
		<Rule Id="CA1032" Action="Warning" /><!-- [DESIGN] Implement standard exception constructors -->
		<Rule Id="CA1033" Action="Warning" /><!-- [DESIGN] Interface methods should be callable by child types -->
		<Rule Id="CA1034" Action="Warning" /><!-- [DESIGN] Nested types should not be visible -->
		<Rule Id="CA1036" Action="Warning" /><!-- [DESIGN] Override methods on comparable types -->
		<Rule Id="CA1040" Action="None" /><!-- [DESIGN] Avoid empty interfaces -->
		<Rule Id="CA1041" Action="Warning" /><!-- [DESIGN] Provide ObsoleteAttribute message -->
		<Rule Id="CA1043" Action="None" /><!-- [DESIGN] Use Integral Or String Argument For Indexers -->
		<Rule Id="CA1044" Action="Warning" /><!-- [DESIGN] Properties should not be write only -->
		<Rule Id="CA1050" Action="Warning" /><!-- [DESIGN] Declare types in namespaces -->
		<Rule Id="CA1051" Action="Warning" /><!-- [DESIGN] Do not declare visible instance fields -->
		<Rule Id="CA1052" Action="None" /><!-- [DESIGN] Static holder types should be Static or NotInheritable -->
		<Rule Id="CA1054" Action="Warning" /><!-- [DESIGN] Uri parameters should not be strings -->
		<Rule Id="CA1055" Action="Warning" /><!-- [DESIGN] Uri return values should not be strings -->
		<Rule Id="CA1056" Action="Warning" /><!-- [DESIGN] Uri properties should not be strings -->
		<Rule Id="CA1060" Action="None" /><!-- [DESIGN] Move pinvokes to native methods class -->
		<Rule Id="CA1061" Action="Warning" /><!-- [DESIGN] Do not hide base class methods -->
		<Rule Id="CA1062" Action="Warning" /><!-- [DESIGN] Validate arguments of public methods -->
		<Rule Id="CA1063" Action="Warning" /><!-- [DESIGN] Implement IDisposable Correctly -->
		<Rule Id="CA1064" Action="Warning" /><!-- [DESIGN] Exceptions should be public -->
		<Rule Id="CA1065" Action="Warning" /><!-- [DESIGN] Do not raise exceptions in unexpected locations -->
		<Rule Id="CA1066" Action="Warning" /><!-- [DESIGN] Type {0} should implement IEquatable<T> because it overrides Equals -->
		<Rule Id="CA1067" Action="Warning" /><!-- [DESIGN] Override Object.Equals(object) when implementing IEquatable<T> -->
		<Rule Id="CA1068" Action="Warning" /><!-- [DESIGN] CancellationToken parameters must come last -->
		<Rule Id="CA1200" Action="Warning" /><!-- [DOCUMENTATION] Avoid using cref tags with a prefix -->
		<Rule Id="CA1501" Action="Warning" /><!-- [MAINTAINABILITY] Avoid excessive inheritance -->
		<Rule Id="CA1502" Action="Warning" /><!-- [MAINTAINABILITY] Avoid excessive complexity -->
		<Rule Id="CA1505" Action="Warning" /><!-- [MAINTAINABILITY] Avoid unmaintainable code -->
		<Rule Id="CA1506" Action="Warning" /><!-- [MAINTAINABILITY] Avoid excessive class coupling -->
		<Rule Id="CA1507" Action="Warning" /><!-- [MAINTAINABILITY] Use nameof to express symbol names -->
		<Rule Id="CA1508" Action="None" /><!-- [MAINTAINABILITY] Avoid dead conditional code -->
		<Rule Id="CA1509" Action="Warning" /><!-- [MAINTAINABILITY] Invalid entry in code metrics rule specification file -->
		<Rule Id="CA1707" Action="Warning" /><!-- [NAMING] Identifiers should not contain underscores -->
		<Rule Id="CA1708" Action="Warning" /><!-- [NAMING] Identifiers should differ by more than case -->
		<Rule Id="CA1710" Action="Warning" /><!-- [NAMING] Identifiers should have correct suffix -->
		<Rule Id="CA1711" Action="Warning" /><!-- [NAMING] Identifiers should not have incorrect suffix -->
		<Rule Id="CA1712" Action="Warning" /><!-- [NAMING] Do not prefix enum values with type name -->
		<Rule Id="CA1714" Action="Warning" /><!-- [NAMING] Flags enums should have plural names -->
		<Rule Id="CA1715" Action="Warning" /><!-- [NAMING] Identifiers should have correct prefix -->
		<Rule Id="CA1716" Action="Warning" /><!-- [NAMING] Identifiers should not match keywords -->
		<Rule Id="CA1717" Action="Warning" /><!-- [NAMING] Only FlagsAttribute enums should have plural names -->
		<Rule Id="CA1720" Action="Warning" /><!-- [NAMING] Identifier contains type name -->
		<Rule Id="CA1721" Action="Warning" /><!-- [NAMING] Property names should not match get methods -->
		<Rule Id="CA1724" Action="Warning" /><!-- [NAMING] Type names should not match namespaces -->
		<Rule Id="CA1725" Action="Warning" /><!-- [NAMING] Parameter names should match base declaration -->
		<Rule Id="CA1801" Action="Warning" /><!-- [USAGE] Review unused parameters -->
		<Rule Id="CA1802" Action="Warning" /><!-- [PERFORMANCE] Use literals where appropriate -->
		<Rule Id="CA1806" Action="Warning" /><!-- [PERFORMANCE] Do not ignore method results -->
		<Rule Id="CA1812" Action="Warning" /><!-- [PERFORMANCE] Avoid uninstantiated internal classes -->
		<Rule Id="CA1814" Action="None" /><!-- [PERFORMANCE] Prefer jagged arrays over multidimensional -->
		<Rule Id="CA1815" Action="Warning" /><!-- [PERFORMANCE] Override equals and operator equals on value types -->
		<Rule Id="CA1819" Action="Warning" /><!-- [PERFORMANCE] Properties should not return arrays -->
		<Rule Id="CA1821" Action="Warning" /><!-- [PERFORMANCE] Remove empty Finalizers -->
		<Rule Id="CA1822" Action="Warning" /><!-- [PERFORMANCE] Mark members as static -->
		<Rule Id="CA1823" Action="Warning" /><!-- [PERFORMANCE] Avoid unused private fields -->
		<Rule Id="CA2007" Action="Warning" /><!-- [RELIABILITY] Consider calling ConfigureAwait on the awaited task -->
		<Rule Id="CA2119" Action="Warning" /><!-- [SECURITY] Seal methods that satisfy private interfaces -->
		<Rule Id="CA2200" Action="Warning" /><!-- [USAGE] Rethrow to preserve stack details. -->
		<Rule Id="CA2211" Action="Warning" /><!-- [USAGE] Non-constant fields should not be visible -->
		<Rule Id="CA2214" Action="Warning" /><!-- [USAGE] Do not call overridable methods in constructors -->
		<Rule Id="CA2217" Action="None" /><!-- [USAGE] Do not mark enums with FlagsAttribute -->
		<Rule Id="CA2218" Action="Warning" /><!-- [USAGE] Override GetHashCode on overriding Equals -->
		<Rule Id="CA2219" Action="Warning" /><!-- [USAGE] Do not raise exceptions in finally clauses -->
		<Rule Id="CA2224" Action="Warning" /><!-- [USAGE] Override Equals on overloading operator equals -->
		<Rule Id="CA2225" Action="Warning" /><!-- [USAGE] Operator overloads have named alternates -->
		<Rule Id="CA2226" Action="Warning" /><!-- [USAGE] Operators should have symmetrical overloads -->
		<Rule Id="CA2227" Action="Warning" /><!-- [USAGE] Collection properties should be read only -->
		<Rule Id="CA2231" Action="Warning" /><!-- [USAGE] Overload operator equals on overriding value type Equals -->
		<Rule Id="CA2234" Action="Warning" /><!-- [USAGE] Pass system uri objects instead of strings -->
		<Rule Id="CA2244" Action="Warning" /><!-- [USAGE] Do not duplicate indexed element initializations -->
		<Rule Id="CA2245" Action="Warning" /><!-- [USAGE] Do not assign a property to itself. -->
		<Rule Id="CA2246" Action="Warning" /><!-- [USAGE] Assigning symbol and its member in the same statement. -->
	</Rules>

	<Rules AnalyzerId="Microsoft.NetCore.Analyzers" RuleNamespace="Microsoft.NetCore.Analyzers">
		<Rule Id="CA1303" Action="None" /><!-- [GLOBALIZATION] Do not pass literals as localized parameters -->
		<Rule Id="CA1304" Action="Warning" /><!-- [GLOBALIZATION] Specify CultureInfo -->
		<Rule Id="CA1305" Action="Warning" /><!-- [GLOBALIZATION] Specify IFormatProvider -->
		<Rule Id="CA1307" Action="Warning" /><!-- [GLOBALIZATION] Specify StringComparison -->
		<Rule Id="CA1308" Action="Warning" /><!-- [GLOBALIZATION] Normalize strings to uppercase -->
		<Rule Id="CA1309" Action="Warning" /><!-- [GLOBALIZATION] Use ordinal stringcomparison -->
		<Rule Id="CA1401" Action="Warning" /><!-- [INTEROPERABILITY] P/Invokes should not be visible -->
		<Rule Id="CA1810" Action="Warning" /><!-- [PERFORMANCE] Initialize reference type static fields inline -->
		<Rule Id="CA1813" Action="Warning" /><!-- [PERFORMANCE] Avoid unsealed attributes -->
		<Rule Id="CA1816" Action="Warning" /><!-- [USAGE] Dispose methods should call SuppressFinalize -->
		<Rule Id="CA1820" Action="Warning" /><!-- [PERFORMANCE] Test for empty strings using string length -->
		<Rule Id="CA1824" Action="None" /><!-- [PERFORMANCE] Mark assemblies with NeutralResourcesLanguageAttribute -->
		<Rule Id="CA1825" Action="Warning" /><!-- [PERFORMANCE] Avoid zero-length array allocations. -->
		<Rule Id="CA1826" Action="Warning" /><!-- [PERFORMANCE] Do not use Enumerable methods on indexable collections. Instead use the collection directly -->
		<Rule Id="CA1827" Action="Warning" /><!-- [PERFORMANCE] Do not use Count() or LongCount() when Any() can be used -->
		<Rule Id="CA1828" Action="Warning" /><!-- [PERFORMANCE] Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used -->
		<Rule Id="CA1829" Action="Warning" /><!-- [PERFORMANCE] Use Length/Count property instead of Count() when available -->
		<Rule Id="CA2000" Action="Info" /><!-- [RELIABILITY] Dispose objects before losing scope -->
		<Rule Id="CA2002" Action="Warning" /><!-- [RELIABILITY] Do not lock on objects with weak identity -->
		<Rule Id="CA2008" Action="None" /><!-- [RELIABILITY] Do not create tasks without passing a TaskScheduler -->
		<Rule Id="CA2009" Action="Warning" /><!-- [RELIABILITY] Do not call ToImmutableCollection on an ImmutableCollection value -->
		<Rule Id="CA2010" Action="Warning" /><!-- [RELIABILITY] Always consume the value returned by methods marked with PreserveSigAttribute -->
		<Rule Id="CA2100" Action="Warning" /><!-- [SECURITY] Review SQL queries for security vulnerabilities -->
		<Rule Id="CA2101" Action="Warning" /><!-- [GLOBALIZATION] Specify marshaling for P/Invoke string arguments -->
		<Rule Id="CA2201" Action="Warning" /><!-- [USAGE] Do not raise reserved exception types -->
		<Rule Id="CA2207" Action="Warning" /><!-- [USAGE] Initialize value type static fields inline -->
		<Rule Id="CA2208" Action="Warning" /><!-- [USAGE] Instantiate argument exceptions correctly -->
		<Rule Id="CA2213" Action="Warning" /><!-- [USAGE] Disposable fields should be disposed -->
		<Rule Id="CA2216" Action="Warning" /><!-- [USAGE] Disposable types should declare finalizer -->
		<Rule Id="CA2229" Action="Warning" /><!-- [USAGE] Implement serialization constructors -->
		<Rule Id="CA2235" Action="Warning" /><!-- [USAGE] Mark all non-serializable fields -->
		<Rule Id="CA2237" Action="Warning" /><!-- [USAGE] Mark ISerializable types with serializable -->
		<Rule Id="CA2241" Action="Warning" /><!-- [USAGE] Provide correct arguments to formatting methods -->
		<Rule Id="CA2242" Action="Warning" /><!-- [USAGE] Test for NaN correctly -->
		<Rule Id="CA2243" Action="Warning" /><!-- [USAGE] Attribute string literals should parse correctly -->
		<Rule Id="CA2300" Action="Warning" /><!-- [SECURITY] Do not use insecure deserializer BinaryFormatter -->
		<Rule Id="CA2301" Action="Warning" /><!-- [SECURITY] Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder -->
		<Rule Id="CA2302" Action="Warning" /><!-- [SECURITY] Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize -->
		<Rule Id="CA2305" Action="Warning" /><!-- [SECURITY] Do not use insecure deserializer LosFormatter -->
		<Rule Id="CA2310" Action="Warning" /><!-- [SECURITY] Do not use insecure deserializer NetDataContractSerializer -->
		<Rule Id="CA2311" Action="Warning" /><!-- [SECURITY] Do not deserialize without first setting NetDataContractSerializer.Binder -->
		<Rule Id="CA2312" Action="Warning" /><!-- [SECURITY] Ensure NetDataContractSerializer.Binder is set before deserializing -->
		<Rule Id="CA2315" Action="Warning" /><!-- [SECURITY] Do not use insecure deserializer ObjectStateFormatter -->
		<Rule Id="CA2321" Action="Warning" /><!-- [SECURITY] Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver -->
		<Rule Id="CA2322" Action="Warning" /><!-- [SECURITY] Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing -->
		<Rule Id="CA2326" Action="Warning" /><!-- [SECURITY] Do not use TypeNameHandling values other than None -->
		<Rule Id="CA2327" Action="Warning" /><!-- [SECURITY] Do not use insecure JsonSerializerSettings -->
		<Rule Id="CA2328" Action="Warning" /><!-- [SECURITY] Ensure that JsonSerializerSettings are secure -->
		<Rule Id="CA2329" Action="Warning" /><!-- [SECURITY] Do not deserialize with JsonSerializer using an insecure configuration -->
		<Rule Id="CA2330" Action="Warning" /><!-- [SECURITY] Ensure that JsonSerializer has a secure configuration when deserializing -->
		<Rule Id="CA3001" Action="Warning" /><!-- [SECURITY] Review code for SQL injection vulnerabilities -->
		<Rule Id="CA3002" Action="Warning" /><!-- [SECURITY] Review code for XSS vulnerabilities -->
		<Rule Id="CA3003" Action="Warning" /><!-- [SECURITY] Review code for file path injection vulnerabilities -->
		<Rule Id="CA3004" Action="Warning" /><!-- [SECURITY] Review code for information disclosure vulnerabilities -->
		<Rule Id="CA3005" Action="Warning" /><!-- [SECURITY] Review code for LDAP injection vulnerabilities -->
		<Rule Id="CA3006" Action="Warning" /><!-- [SECURITY] Review code for process command injection vulnerabilities -->
		<Rule Id="CA3007" Action="Warning" /><!-- [SECURITY] Review code for open redirect vulnerabilities -->
		<Rule Id="CA3008" Action="Warning" /><!-- [SECURITY] Review code for XPath injection vulnerabilities -->
		<Rule Id="CA3009" Action="Warning" /><!-- [SECURITY] Review code for XML injection vulnerabilities -->
		<Rule Id="CA3010" Action="Warning" /><!-- [SECURITY] Review code for XAML injection vulnerabilities -->
		<Rule Id="CA3011" Action="Warning" /><!-- [SECURITY] Review code for DLL injection vulnerabilities -->
		<Rule Id="CA3012" Action="Warning" /><!-- [SECURITY] Review code for regex injection vulnerabilities -->
		<Rule Id="CA3061" Action="Warning" /><!-- [SECURITY] Do Not Add Schema By URL -->
		<Rule Id="CA5350" Action="Warning" /><!-- [SECURITY] Do Not Use Weak Cryptographic Algorithms -->
		<Rule Id="CA5351" Action="Warning" /><!-- [SECURITY] Do Not Use Broken Cryptographic Algorithms -->
		<Rule Id="CA5358" Action="Warning" /><!-- [SECURITY] Do Not Use Unsafe Cipher Modes -->
		<Rule Id="CA5359" Action="Warning" /><!-- [SECURITY] Do Not Disable Certificate Validation -->
		<Rule Id="CA5360" Action="Warning" /><!-- [SECURITY] Do Not Call Dangerous Methods In Deserialization -->
		<Rule Id="CA5361" Action="Warning" /><!-- [SECURITY] Do Not Disable SChannel Use of Strong Crypto -->
		<Rule Id="CA5362" Action="Warning" /><!-- [SECURITY] Do Not Refer Self In Serializable Class -->
		<Rule Id="CA5363" Action="Warning" /><!-- [SECURITY] Do Not Disable Request Validation -->
		<Rule Id="CA5364" Action="Warning" /><!-- [SECURITY] Do Not Use Deprecated Security Protocols -->
		<Rule Id="CA5365" Action="Warning" /><!-- [SECURITY] Do Not Disable HTTP Header Checking -->
		<Rule Id="CA5366" Action="Warning" /><!-- [SECURITY] Use XmlReader For DataSet Read Xml -->
		<Rule Id="CA5367" Action="Warning" /><!-- [SECURITY] Do Not Serialize Types With Pointer Fields -->
		<Rule Id="CA5368" Action="Warning" /><!-- [SECURITY] Set ViewStateUserKey For Classes Derived From Page -->
		<Rule Id="CA5369" Action="Warning" /><!-- [SECURITY] Use XmlReader For Deserialize -->
		<Rule Id="CA5370" Action="Warning" /><!-- [SECURITY] Use XmlReader For Validating Reader -->
		<Rule Id="CA5371" Action="Warning" /><!-- [SECURITY] Use XmlReader For Schema Read -->
		<Rule Id="CA5372" Action="Warning" /><!-- [SECURITY] Use XmlReader For XPathDocument -->
		<Rule Id="CA5373" Action="Warning" /><!-- [SECURITY] Do not use obsolete key derivation function -->
		<Rule Id="CA5374" Action="Warning" /><!-- [SECURITY] Do Not Use XslTransform -->
		<Rule Id="CA5375" Action="Warning" /><!-- [SECURITY] Do Not Use Account Shared Access Signature -->
		<Rule Id="CA5376" Action="Warning" /><!-- [SECURITY] Use SharedAccessProtocol HttpsOnly -->
		<Rule Id="CA5377" Action="Warning" /><!-- [SECURITY] Use Container Level Access Policy -->
		<Rule Id="CA5378" Action="Warning" /><!-- [SECURITY] Do not disable ServicePointManagerSecurityProtocols -->
		<Rule Id="CA5379" Action="Warning" /><!-- [SECURITY] Do Not Use Weak Key Derivation Function Algorithm -->
		<Rule Id="CA5380" Action="Warning" /><!-- [SECURITY] Do Not Add Certificates To Root Store -->
		<Rule Id="CA5381" Action="Warning" /><!-- [SECURITY] Ensure Certificates Are Not Added To Root Store -->
		<Rule Id="CA5382" Action="Warning" /><!-- [SECURITY] Use Secure Cookies In ASP.Net Core -->
		<Rule Id="CA5383" Action="Warning" /><!-- [SECURITY] Ensure Use Secure Cookies In ASP.Net Core -->
		<Rule Id="CA5384" Action="Warning" /><!-- [SECURITY] Do Not Use Digital Signature Algorithm (DSA) -->
		<Rule Id="CA5385" Action="Warning" /><!-- [SECURITY] Use Rivestâ€“Shamirâ€“Adleman (RSA) Algorithm With Sufficient Key Size -->
		<Rule Id="CA5386" Action="Warning" /><!-- [SECURITY] Avoid hardcoding SecurityProtocolType value -->
		<Rule Id="CA5387" Action="Warning" /><!-- [SECURITY] Do Not Use Weak Key Derivation Function With Insufficient Iteration Count -->
		<Rule Id="CA5388" Action="Warning" /><!-- [SECURITY] Ensure Sufficient Iteration Count When Using Weak Key Derivation Function -->
		<Rule Id="CA5389" Action="Warning" /><!-- [SECURITY] Do Not Add Archive Item's Path To The Target File System Path -->
		<Rule Id="CA5390" Action="Warning" /><!-- [SECURITY] Do Not Hard Code Encryption Key -->
		<Rule Id="CA5391" Action="Warning" /><!-- [SECURITY] Use antiforgery tokens in ASP.NET Core MVC controllers -->
		<Rule Id="CA5392" Action="Warning" /><!-- [SECURITY] Use DefaultDllImportSearchPaths attribute for P/Invokes -->
		<Rule Id="CA5393" Action="Warning" /><!-- [SECURITY] Do not use unsafe DllImportSearchPath value -->
		<Rule Id="CA5394" Action="None" /><!-- [SECURITY] Do not use insecure randomness -->
		<Rule Id="CA5395" Action="Warning" /><!-- [SECURITY] Miss HttpVerb attribute for action methods -->
		<Rule Id="CA5396" Action="Warning" /><!-- [SECURITY] Set HttpOnly to true for HttpCookie -->
		<Rule Id="CA5397" Action="Warning" /><!-- [SECURITY] Do not use deprecated SslProtocols values -->
		<Rule Id="CA5398" Action="Warning" /><!-- [SECURITY] Avoid hardcoded SslProtocols values -->
		<Rule Id="CA5399" Action="Warning" /><!-- [SECURITY] Definitely disable HttpClient certificate revocation list check -->
		<Rule Id="CA5400" Action="Warning" /><!-- [SECURITY] Ensure HttpClient certificate revocation list check is not disabled -->
	</Rules>

	<Rules AnalyzerId="SecurityCodeScan" RuleNamespace="SecurityCodeScan.Analyzers">
		<!-- Injection -->
		<Rule Id="SCS0001" Action="Warning" /><!-- [SECURITY] The dynamic value passed to the command execution should be validated. -->
		<Rule Id="SCS0003" Action="Warning" /><!-- [SECURITY] The dynamic value passed to the XPath query should be validated. -->
		<Rule Id="SCS0007" Action="Warning" /><!-- [SECURITY] The XML parser is configured incorrectly. The operation could be vulnerable to XML eXternal Entity (XXE) processing. -->
		<Rule Id="SCS0018" Action="Warning" /><!-- [SECURITY] A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the expected directory.By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files. -->
		<Rule Id="SCS0029" Action="Warning" /><!-- [SECURITY] A potential XSS was found. The endpoint returns a variable from the client input that has not been encoded. To protect against stored XSS attacks, make sure any dynamic content coming from user or data store cannot be used to inject JavaScript on a page. Most modern frameworks will escape dynamic content by default automatically (Razor for example) or by using special syntax (<%: content %>, <%= HttpUtility.HtmlEncode(content) %>). -->
		<Rule Id="SCS0031" Action="Warning" /><!-- [SECURITY] The dynamic value passed to the LDAP query should be validated. -->
		<!-- SQL Injection -->
		<Rule Id="SCS0002" Action="Warning" /><!-- [SECURITY] Unsafe usage of System.Web.UI.WebControls.SqlDataSource, System.Web.UI.WebControls.SqlDataSourceView or Microsoft.Whos.Framework.Data.SqlUtility. -->
		<Rule Id="SCS0014" Action="Warning" /><!-- [SECURITY] Unsafe usage of System.Web.UI.WebControls.SqlDataSource, System.Web.UI.WebControls.SqlDataSourceView or Microsoft.Whos.Framework.Data.SqlUtility. -->
		<Rule Id="SCS0020" Action="Warning" /><!-- [SECURITY] Use parametrized queries to mitigate SQL injection. -->
		<Rule Id="SCS0025" Action="Warning" /><!-- [SECURITY] Use parametrized queries to mitigate SQL injection. -->
		<Rule Id="SCS0026" Action="Warning" /><!-- [SECURITY] Use parametrized queries to mitigate SQL injection. -->
		<Rule Id="SCS0035" Action="Warning" /><!-- [SECURITY] Use parametrized queries to mitigate SQL injection. -->
		<Rule Id="SCS0036" Action="Warning" /><!-- [SECURITY] Use parametrized queries to mitigate SQL injection. -->
		<!-- Cryptography -->
		<Rule Id="SCS0004" Action="Warning" /><!-- [SECURITY] Certificate Validation has been disabled. The communication could be intercepted. -->
		<Rule Id="SCS0005" Action="None" /><!-- [SECURITY] The random numbers generated could be predicted. -->
		<Rule Id="SCS0006" Action="Warning" /><!-- [SECURITY] MD5 or SHA1 have known collision weaknesses and are no longer considered strong hashing algorithms. -->
		<Rule Id="SCS0010" Action="Warning" /><!-- [SECURITY] DES and 3DES are not considered a strong cipher for modern applications. Currently, NIST recommends the usage of AES block ciphers instead. -->
		<Rule Id="SCS0011" Action="Warning" /><!-- [SECURITY] The CBC mode alone is susceptible to padding oracle attack. -->
		<Rule Id="SCS0012" Action="Warning" /><!-- [SECURITY] ECB mode will produce the same result for identical blocks (ie: 16 bytes for AES). An attacker could be able to guess the encrypted message. The use of AES in CBC mode with a HMAC is recommended guaranteeing integrity and confidentiality. -->
		<Rule Id="SCS0013" Action="Warning" /><!-- [SECURITY] The cipher text produced is susceptible to alteration by an adversary. -->
		<!-- Cookies -->
		<Rule Id="SCS0008" Action="Warning" /><!-- [SECURITY] It is recommended to specify the Secure flag to new cookie. -->
		<Rule Id="SCS0009" Action="Warning" /><!-- [SECURITY] It is recommended to specify the HttpOnly flag to new cookie. -->
		<!-- View State -->
		<Rule Id="SCS0023" Action="Warning" /><!-- [SECURITY] The viewStateEncryptionMode is not set to Always in configuration file. -->
		<Rule Id="SCS0024" Action="Warning" /><!-- [SECURITY] The enableViewStateMac is disabled in configuration file. (This feature cannot be disabled starting .NET 4.5.1) -->
		<!-- Request Valudation -->
		<Rule Id="SCS0017" Action="Warning" /><!-- [SECURITY] Request validation is disabled. Request validation allows the filtering of some XSS patterns submitted to the application. -->
		<Rule Id="SCS0021" Action="Warning" /><!-- [SECURITY] The validateRequest which provides additional protection against XSS is disabled in configuration file. -->
		<Rule Id="SCS0030" Action="Warning" /><!-- [SECURITY] The requestValidationMode which provides additional protection against XSS is enabled only for pages, not for all HTTP requests in configuration file. -->
		<!-- Password Management -->
		<Rule Id="SCS0015" Action="Warning" /><!-- [SECURITY] The password configuration to this API appears to be hardcoded. -->
		<Rule Id="SCS0034" Action="Warning" /><!-- [SECURITY] The RequiredLength property must be set with a minimum value of 8. -->
		<Rule Id="SCS0032" Action="Warning" /><!-- [SECURITY] The minimal length of a password is recommended to be set at least to 8. -->
		<Rule Id="SCS0033" Action="Warning" /><!-- [SECURITY] PasswordValidator should have at least two requirements for better security (RequiredLength, RequireDigit, RequireLowercase, RequireUppercase and/or RequireNonLetterOrDigit). -->
	</Rules>

	<Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers">
		<Rule Id="SA1000" Action="Warning" /><!-- The spacing around a C# keyword is incorrect. -->
		<Rule Id="SA1001" Action="Warning" /><!-- The spacing around a comma is incorrect, within a C# code file. -->
		<Rule Id="SA1002" Action="Warning" /><!-- The spacing around a semicolon is incorrect, within a C# code file. -->
		<Rule Id="SA1003" Action="Warning" /><!-- The spacing around an operator symbol is incorrect, within a C# code file. -->
		<Rule Id="SA1004" Action="Warning" /><!-- A line within a documentation header above a C# element does not begin with a single space. -->
		<Rule Id="SA1005" Action="Warning" /><!-- A single-line comment within a C# code file does not begin with a single space. -->
		<Rule Id="SA1006" Action="Warning" /><!-- A C# preprocessor-type keyword is preceded by space. -->
		<Rule Id="SA1007" Action="Warning" /><!-- The operator keyword within a C# operator overload method is not followed by any whitespace. -->
		<Rule Id="SA1008" Action="Warning" /><!-- An opening parenthesis within a C# statement is not spaced correctly. -->
		<Rule Id="SA1009" Action="Warning" /><!-- A closing parenthesis within a C# statement is not spaced correctly. -->
		<Rule Id="SA1010" Action="Warning" /><!-- An opening square bracket within a C# statement is not spaced correctly. -->
		<Rule Id="SA1011" Action="Warning" /><!-- A closing square bracket within a C# statement is not spaced correctly. -->
		<Rule Id="SA1012" Action="Warning" /><!-- An opening brace within a C# element is not spaced correctly. -->
		<Rule Id="SA1013" Action="Warning" /><!-- A closing brace within a C# element is not spaced correctly. -->
		<Rule Id="SA1014" Action="Warning" /><!-- An opening generic bracket within a C# element is not spaced correctly. -->
		<Rule Id="SA1015" Action="Warning" /><!-- A closing generic bracket within a C# element is not spaced correctly. -->
		<Rule Id="SA1016" Action="Warning" /><!-- An opening attribute bracket within a C# element is not spaced correctly. -->
		<Rule Id="SA1017" Action="Warning" /><!-- A closing attribute bracket within a C# element is not spaced correctly. -->
		<Rule Id="SA1018" Action="Warning" /><!-- A nullable type symbol within a C# element is not spaced correctly. -->
		<Rule Id="SA1019" Action="Warning" /><!-- The spacing around a member access symbol is incorrect, within a C# code file. -->
		<Rule Id="SA1020" Action="Warning" /><!-- An increment or decrement symbol within a C# element is not spaced correctly. -->
		<Rule Id="SA1021" Action="Warning" /><!-- A negative sign within a C# element is not spaced correctly. -->
		<Rule Id="SA1022" Action="Warning" /><!-- A positive sign within a C# element is not spaced correctly. -->
		<Rule Id="SA1023" Action="Warning" /><!-- A dereference symbol or an access-of symbol within a C# element is not spaced correctly. -->
		<Rule Id="SA1024" Action="Warning" /><!-- A colon within a C# element is not spaced correctly. -->
		<Rule Id="SA1025" Action="Warning" /><!-- The code contains multiple whitespace characters in a row. -->
		<Rule Id="SA1026" Action="Warning" /><!-- An implicitly typed new array allocation within a C# code file is not spaced correctly. -->
		<Rule Id="SA1027" Action="None" /><!-- The code contains a tab or space character which is not consistent with the current project settings. -->
		<Rule Id="SA1028" Action="Warning" /><!-- A line of code ends with a space, tab, or other whitespace characters before the end of line character(s). -->
		<Rule Id="SA1100" Action="Warning" /><!-- A call to a member from an inherited class begins with `base.`, and the local class does not contain an override or implementation of the member. -->
		<Rule Id="SA1101" Action="None" /><!-- A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file. -->
		<Rule Id="SA1102" Action="Warning" /><!-- A C# query clause does not begin on the same line as the previous clause, or on the next line. -->
		<Rule Id="SA1103" Action="Warning" /><!-- The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line. -->
		<Rule Id="SA1104" Action="Warning" /><!-- A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines. -->
		<Rule Id="SA1105" Action="Warning" /><!-- A clause within a C# query expression spans across multiple lines, and does not begin on its own line. -->
		<Rule Id="SA1106" Action="Warning" /><!-- The C# code contains an extra semicolon. -->
		<Rule Id="SA1107" Action="Warning" /><!-- The C# code contains more than one statement on a single line. -->
		<Rule Id="SA1108" Action="Warning" /><!-- A C# statement contains a comment between the declaration of the statement and the opening brace of the statement. -->
		<Rule Id="SA1109" Action="Warning" /><!-- A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement. -->
		<Rule Id="SA1110" Action="Warning" /><!-- The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name. -->
		<Rule Id="SA1111" Action="Warning" /><!-- The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter. -->
		<Rule Id="SA1112" Action="Warning" /><!-- The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters. -->
		<Rule Id="SA1113" Action="Warning" /><!-- A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter. -->
		<Rule Id="SA1114" Action="Warning" /><!-- The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket. -->
		<Rule Id="SA1115" Action="Warning" /><!-- A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line. -->
		<Rule Id="SA1116" Action="Warning" /><!-- The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket. -->
		<Rule Id="SA1117" Action="Warning" /><!-- The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line. -->
		<Rule Id="SA1118" Action="Warning" /><!-- A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines. -->
		<Rule Id="SA1119" Action="Warning" /><!-- A C# statement contains parenthesis which are unnecessary and should be removed. -->
		<Rule Id="SA1120" Action="Warning" /><!-- The C# comment does not contain any comment text. -->
		<Rule Id="SA1121" Action="Warning" /><!-- The code uses one of the basic C# types, but does not use the built-in alias for the type. -->
		<Rule Id="SA1122" Action="Warning" /><!-- The C# code includes an empty string, written as `"`. -->
		<Rule Id="SA1123" Action="Warning" /><!-- The C# code contains a region within the body of a code element. -->
		<Rule Id="SA1124" Action="Warning" /><!-- The C# code contains a region. -->
		<Rule Id="SA1125" Action="Warning" /><!-- The Nullable type has been defined not using the C# shorthand. -->
		<Rule Id="SA1126" Action="None" /><!-- A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file. -->
		<Rule Id="SA1127" Action="None" /><!-- A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file. -->
		<Rule Id="SA1128" Action="None" /><!-- A constructor initializer is on the same line as the constructor declaration, within a C# code file. -->
		<Rule Id="SA1129" Action="Warning" /><!-- A value type was constructed using the syntax `new T()`. -->
		<Rule Id="SA1130" Action="Warning" /><!-- An anonymous method was declared using the form `delegate (parameters) { }`, when a lambda expression would provide equivalent behavior with the syntax `(parameters) => { }`. -->
		<Rule Id="SA1131" Action="Warning" /><!-- A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression. -->
		<Rule Id="SA1132" Action="Warning" /><!-- Two or more fields were declared in the same field declaration syntax. -->
		<Rule Id="SA1133" Action="None" /><!-- Two or more attributes appeared within the same set of square brackets. -->
		<Rule Id="SA1134" Action="Warning" /><!-- An attribute is placed on the same line of code as another attribute or element. -->
		<Rule Id="SA1135" Action="None" /><!-- A using directive is not qualified. -->
		<Rule Id="SA1136" Action="None" /><!-- Multiple enum values are placed on the same line of code. -->
		<Rule Id="SA1137" Action="Warning" /><!-- Two sibling elements which each start on their own line have different levels of indentation. -->
		<Rule Id="SA1139" Action="Warning" /><!-- Use literal suffix notation instead of casting. -->
		<Rule Id="SA1141" Action="Warning" /><!-- Use tuple syntax instead of the underlying ValueTuple implementation type. -->
		<Rule Id="SA1142" Action="Warning" /><!-- An element of a tuple was referenced by its metadata name when an element name is available. -->
		<Rule Id="SA1200" Action="None" /><!-- A C# using directive is placed outside of a namespace element. -->
		<Rule Id="SA1201" Action="None" /><!-- An element within a C# code file is out of order in relation to the other elements in the code. -->
		<Rule Id="SA1202" Action="None" /><!-- An element within a C# code file is out of order within regard to access level, in relation to other elements in the code. -->
		<Rule Id="SA1203" Action="Warning" /><!-- A constant field is placed beneath a non-constant field. -->
		<Rule Id="SA1204" Action="None" /><!-- A static element is positioned beneath an instance element of the same type. -->
		<Rule Id="SA1205" Action="Warning" /><!-- The partial element does not have an access modifier defined. -->
		<Rule Id="SA1206" Action="Warning" /><!-- The keywords within the declaration of an element do not follow a standard ordering scheme. -->
		<Rule Id="SA1207" Action="Warning" /><!-- The keyword *protected* is positioned after the keyword *internal* within the declaration of a protected internal C# element. -->
		<Rule Id="SA1208" Action="Warning" /><!-- A using directive which declares a member of the *System* namespace appears after a using directive which declares a member of a different namespace, within a C# code file. -->
		<Rule Id="SA1209" Action="Warning" /><!-- A using-alias directive is positioned before a regular using directive. -->
		<Rule Id="SA1210" Action="Warning" /><!-- The using directives within a C# code file are not sorted alphabetically by namespace. -->
		<Rule Id="SA1211" Action="Warning" /><!-- The using-alias directives within a C# code file are not sorted alphabetically by alias name. -->
		<Rule Id="SA1212" Action="Warning" /><!-- A get accessor appears after a set accessor within a property or indexer. -->
		<Rule Id="SA1213" Action="Warning" /><!-- An add accessor appears after a remove accessor within an event. -->
		<Rule Id="SA1214" Action="Warning" /><!-- A readonly field is positioned beneath a non-readonly field. -->
		<Rule Id="SA1215" Action="Warning" /><!-- An instance readonly element is positioned beneath an instance non-readonly element of the same type. -->
		<Rule Id="SA1216" Action="Warning" /><!-- A `using static` directive is positioned at the wrong location (before a regular using directive or after an alias using directive). -->
		<Rule Id="SA1217" Action="Warning" /><!-- The `using static` directives within a C# code file are not sorted alphabetically by full type name. -->
		<Rule Id="SA1300" Action="Warning" /><!-- The name of a C# element does not begin with an upper-case letter. -->
		<Rule Id="SA1301" Action="None" /><!-- There are currently no situations in which this rule will fire. -->
		<Rule Id="SA1302" Action="Warning" /><!-- The name of a C# interface does not begin with the capital letter I. -->
		<Rule Id="SA1303" Action="Warning" /><!-- The name of a constant C# field should begin with an upper-case letter. -->
		<Rule Id="SA1304" Action="Warning" /><!-- The name of a non-private readonly C# field should being with an upper-case letter. -->
		<Rule Id="SA1305" Action="Warning" /><!-- The name of a field or variable in C# uses Hungarian notation. -->
		<Rule Id="SA1306" Action="Warning" /><!-- The name of a field in C# does not begin with a lower-case letter. -->
		<Rule Id="SA1307" Action="Warning" /><!-- The name of a public or internal field in C# does not begin with an upper-case letter. -->
		<Rule Id="SA1308" Action="Warning" /><!-- A field name in C# is prefixed with *m_* or *s_*. -->
		<Rule Id="SA1309" Action="None" /><!-- A field name in C# begins with an underscore. -->
		<Rule Id="SA1310" Action="Warning" /><!-- A field name in C# contains an underscore. -->
		<Rule Id="SA1311" Action="Warning" /><!-- The name of a static readonly field does not begin with an upper-case letter. -->
		<Rule Id="SA1312" Action="Warning" /><!-- The name of a variable in C# does not begin with a lower-case letter. -->
		<Rule Id="SA1313" Action="Warning" /><!-- The name of a parameter in C# does not begin with a lower-case letter. -->
		<Rule Id="SA1314" Action="Warning" /><!-- The name of a C# type parameter does not begin with the capital letter T. -->
		<Rule Id="SA1316" Action="Warning" /><!-- Element names within a tuple type should have the correct casing. -->
		<Rule Id="SA1400" Action="Warning" /><!-- The access modifier for a C# element has not been explicitly defined. -->
		<Rule Id="SA1401" Action="Warning" /><!-- A field within a C# class has an access modifier other than private. -->
		<Rule Id="SA1402" Action="None" /><!-- A C# code file contains more than one unique type. -->
		<Rule Id="SA1403" Action="Warning" /><!-- A C# code file contains more than one namespace. -->
		<Rule Id="SA1404" Action="Warning" /><!-- A Code Analysis SuppressMessage attribute does not include a justification. -->
		<Rule Id="SA1405" Action="None" /><!-- A call to Debug.Assert in C# code does not include a descriptive message. -->
		<Rule Id="SA1406" Action="Warning" /><!-- A call to Debug.Fail in C# code does not include a descriptive message. -->
		<Rule Id="SA1407" Action="None" /><!-- A C# statement contains a complex arithmetic expression which omits parenthesis around operators. -->
		<Rule Id="SA1408" Action="None" /><!-- A C# statement contains a complex conditional expression which omits parenthesis around operators. -->
		<Rule Id="SA1409" Action="Warning" /><!-- A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code. -->
		<Rule Id="SA1410" Action="Warning" /><!-- A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis. -->
		<Rule Id="SA1411" Action="Warning" /><!-- An attribute declaration does not contain any parameters, yet it still includes parenthesis. -->
		<Rule Id="SA1412" Action="None" /><!-- The encoding of the file is not UTF-8 with byte order mark. -->
		<Rule Id="SA1413" Action="None" /><!-- A multi-line initializer should use a comma on the last item. -->
		<Rule Id="SA1414" Action="Warning" /><!-- Tuple types appearing in member declarations should have explicitly named tuple elements. -->
		<Rule Id="SA1500" Action="Warning" /><!-- The opening or closing brace within a C# statement, element, or expression is not placed on its own line. -->
		<Rule Id="SA1501" Action="None" /><!-- A C# statement containing opening and closing braces is written completely on a single line. -->
		<Rule Id="SA1502" Action="None" /><!-- A C# element containing opening and closing braces is written completely on a single line. -->
		<Rule Id="SA1503" Action="None" /><!-- The opening and closing braces for a C# statement have been omitted. -->
		<Rule Id="SA1504" Action="None" /><!-- Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines. -->
		<Rule Id="SA1505" Action="Warning" /><!-- An opening brace within a C# element, statement, or expression is followed by a blank line. -->
		<Rule Id="SA1506" Action="Warning" /><!-- An element documentation header above a C# element is followed by a blank line. -->
		<Rule Id="SA1507" Action="Warning" /><!-- The C# code contains multiple blank lines in a row. -->
		<Rule Id="SA1508" Action="Warning" /><!-- A closing brace within a C# element, statement, or expression is preceded by a blank line. -->
		<Rule Id="SA1509" Action="Warning" /><!-- An opening brace within a C# element, statement, or expression is preceded by a blank line. -->
		<Rule Id="SA1510" Action="Warning" /><!-- Chained C# statements are separated by a blank line. -->
		<Rule Id="SA1511" Action="Warning" /><!-- The while footer at the bottom of a do-while statement is separated from the statement by a blank line. -->
		<Rule Id="SA1512" Action="Warning" /><!-- A single-line comment within C# code is followed by a blank line. -->
		<Rule Id="SA1513" Action="Warning" /><!-- A closing brace within a C# element, statement, or expression is not followed by a blank line. -->
		<Rule Id="SA1514" Action="Warning" /><!-- An element documentation header above a C# element is not preceded by a blank line. -->
		<Rule Id="SA1515" Action="Warning" /><!-- A single-line comment within C# code is not preceded by a blank line. -->
		<Rule Id="SA1516" Action="Warning" /><!-- Adjacent C# elements are not separated by a blank line. -->
		<Rule Id="SA1517" Action="Warning" /><!-- The code file has blank lines at the start. -->
		<Rule Id="SA1518" Action="Warning" /><!-- The line endings at the end of a file do not match the settings for the project. -->
		<Rule Id="SA1519" Action="Warning" /><!-- The opening and closing braces for a multi-line C# statement have been omitted. -->
		<Rule Id="SA1520" Action="Warning" /><!-- The opening and closing braces of a chained `if`/`else if`/`else` construct were included for some clauses, but omitted for others. -->
		<Rule Id="SA1600" Action="None" /><!-- A C# code element is missing a documentation header. -->
		<Rule Id="SA1601" Action="Warning" /><!-- A C# partial element is missing a documentation header. -->
		<Rule Id="SA1602" Action="Warning" /><!-- An item within a C# enumeration is missing an Xml documentation header. -->
		<Rule Id="SA1603" Action="Warning" /><!-- The Xml within a C# element's document header is badly formed. -->
		<Rule Id="SA1604" Action="Warning" /><!-- The Xml header documentation for a C# element is missing a `<summary>` tag. -->
		<Rule Id="SA1605" Action="Warning" /><!-- The `<summary>` or `<content>` tag within the documentation header for a C# code element is missing or empty. -->
		<Rule Id="SA1606" Action="Warning" /><!-- The `<summary>` tag within the documentation header for a C# code element is empty. -->
		<Rule Id="SA1607" Action="Warning" /><!-- The `<summary>` or `<content>` tag within the documentation header for a C# code element is empty. -->
		<Rule Id="SA1608" Action="Warning" /><!-- The `<summary>` tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element. -->
		<Rule Id="SA1609" Action="None" /><!-- The Xml header documentation for a C# property does not contain a `<value>` tag. -->
		<Rule Id="SA1610" Action="None" /><!-- The Xml header documentation for a C# property contains an empty `<value>` tag. -->
		<Rule Id="SA1611" Action="None" /><!-- A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters. -->
		<Rule Id="SA1612" Action="Warning" /><!-- The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element. -->
		<Rule Id="SA1613" Action="Warning" /><!-- A `<param>` tag within a C# element's documentation header is missing a name attribute containing the name of the parameter. -->
		<Rule Id="SA1614" Action="Warning" /><!-- A `<param>` tag within a C# element's documentation header is empty. -->
		<Rule Id="SA1615" Action="None" /><!-- A C# element is missing documentation for its return value. -->
		<Rule Id="SA1616" Action="Warning" /><!-- The `<returns>` tag within a C# element's documentation header is empty. -->
		<Rule Id="SA1617" Action="Warning" /><!-- A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a `<returns>` tag. -->
		<Rule Id="SA1618" Action="None" /><!-- A generic C# element is missing documentation for one or more of its generic type parameters. -->
		<Rule Id="SA1619" Action="None" /><!-- A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a `<summary>` tag. -->
		<Rule Id="SA1620" Action="Warning" /><!-- The `<typeparam>` tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element. -->
		<Rule Id="SA1621" Action="Warning" /><!-- A `<typeparam>` tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute. -->
		<Rule Id="SA1622" Action="Warning" /><!-- A `<typeparam>` tag within the Xml header documentation for a generic C# element is empty. -->
		<Rule Id="SA1623" Action="None" /><!-- The documentation text within a C# property's `<summary>` tag does not match the accessors within the property. -->
		<Rule Id="SA1624" Action="None" /><!-- The documentation text within a C# property's `<summary>` tag takes into account all of the accessors within the property, but one of the accessors has limited access. -->
		<Rule Id="SA1625" Action="Warning" /><!-- The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted. -->
		<Rule Id="SA1626" Action="Warning" /><!-- The C# code contains a single-line comment which begins with three forward slashes in a row. -->
		<Rule Id="SA1627" Action="Warning" /><!-- The Xml header documentation for a C# code element contains an empty tag. -->
		<Rule Id="SA1628" Action="Warning" /><!-- A section of the Xml header documentation for a C# element does not begin with a capital letter. -->
		<Rule Id="SA1629" Action="Warning" /><!-- A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop). -->
		<Rule Id="SA1630" Action="Warning" /><!-- A section of the Xml header documentation for a C# element does not contain any whitespace between words. -->
		<Rule Id="SA1631" Action="Warning" /><!-- A section of the Xml header documentation for a C# element does not contain enough alphabetic characters. -->
		<Rule Id="SA1632" Action="None" /><!-- From StyleCop 4.5 this rule is disabled by default. -->
		<Rule Id="SA1633" Action="None" /><!-- A C# code file is missing a standard file header. -->
		<Rule Id="SA1634" Action="None" /><!-- The file header at the top of a C# code file is missing a copyright tag. -->
		<Rule Id="SA1635" Action="None" /><!-- The file header at the top of a C# code file is missing copyright text. -->
		<Rule Id="SA1636" Action="None" /><!-- The file header at the top of a C# code file does not contain the appropriate copyright text. -->
		<Rule Id="SA1637" Action="None" /><!-- The file header at the top of a C# code file is missing the file name. -->
		<Rule Id="SA1638" Action="None" /><!-- The file tag within the file header at the top of a C# code file does not contain the name of the file. -->
		<Rule Id="SA1639" Action="None" /><!-- The file header at the top of a C# code file does not contain a filled-in summary tag. -->
		<Rule Id="SA1640" Action="None" /><!-- The file header at the top of a C# code file does not contain company name text. -->
		<Rule Id="SA1641" Action="None" /><!-- The file header at the top of a C# code file does not contain the appropriate company name text. -->
		<Rule Id="SA1642" Action="Warning" /><!-- The XML documentation header for a C# constructor does not contain the appropriate summary text. -->
		<Rule Id="SA1643" Action="Warning" /><!-- The Xml documentation header for a C# finalizer does not contain the appropriate summary text. -->
		<Rule Id="SA1644" Action="Warning" /><!-- A section within the Xml documentation header for a C# element contains blank lines. -->
		<Rule Id="SA1645" Action="Warning" /><!-- An included Xml documentation file does not exist. -->
		<Rule Id="SA1646" Action="Warning" /><!-- An included Xml documentation link contains an invalid path. -->
		<Rule Id="SA1647" Action="Warning" /><!-- An include tag within an Xml documentation header does not contain valid file and path attribute. -->
		<Rule Id="SA1648" Action="Warning" /><!-- `<inheritdoc>` has been used on an element that doesn't inherit from a base class or implement an interface. -->
		<Rule Id="SA1649" Action="Warning" /><!-- The file name of a C# code file does not match the first type declared in the file. -->
		<Rule Id="SA1650" Action="Warning" /><!-- The element documentation for the element contains one or more spelling mistakes or unrecognized words. -->
		<Rule Id="SA1651" Action="Warning" /><!-- The documentation for the element contains one or more `<placeholder>` elements. -->
		<Rule Id="SA1652" Action="None" /><!-- This rule was moved to [SA0001](SA0001.md) -->
	</Rules>

	<Rules AnalyzerId="ReflectionAnalyzers" RuleNamespace="ReflectionAnalyzers">
		<Rule Id="REFL001" Action="Warning" /><!-- Cast return value to the correct type. -->
		<Rule Id="REFL002" Action="Warning" /><!-- Discard the return value. -->
		<Rule Id="REFL003" Action="Warning" /><!-- The member does not exist. -->
		<Rule Id="REFL004" Action="Warning" /><!-- More than one member is matching the criteria. -->
		<Rule Id="REFL005" Action="Warning" /><!-- There is no member matching the filter. -->
		<Rule Id="REFL006" Action="Warning" /><!-- The binding flags can be more precise. -->
		<Rule Id="REFL007" Action="Warning" /><!-- The binding flags are not in the expected order. -->
		<Rule Id="REFL008" Action="Warning" /><!-- Specify binding flags for better performance and less fragile code. -->
		<Rule Id="REFL009" Action="Warning" /><!-- The referenced member is not known to exist. -->
		<Rule Id="REFL010" Action="Warning" /><!-- Prefer the generic extension method GetCustomAttribute<T>. -->
		<Rule Id="REFL011" Action="Warning" /><!-- Duplicate BindingFlag. -->
		<Rule Id="REFL012" Action="Warning" /><!-- Prefer Attribute.IsDefined(). -->
		<Rule Id="REFL013" Action="Warning" /><!-- The member is of the wrong type. -->
		<Rule Id="REFL014" Action="Warning" /><!-- Prefer GetMember().AccessorMethod. -->
		<Rule Id="REFL015" Action="Warning" /><!-- Use the containing type. -->
		<Rule Id="REFL016" Action="Warning" /><!-- Use nameof. -->
		<Rule Id="REFL017" Action="Warning" /><!-- Don't use name of wrong member. -->
		<Rule Id="REFL018" Action="Warning" /><!-- The member is explicitly implemented. -->
		<Rule Id="REFL019" Action="Warning" /><!-- No member matches the types. -->
		<Rule Id="REFL020" Action="Warning" /><!-- More than one interface is matching the name. -->
		<Rule Id="REFL022" Action="Warning" /><!-- Use fully qualified name. -->
		<Rule Id="REFL023" Action="Warning" /><!-- The type does not implement the interface. -->
		<Rule Id="REFL024" Action="Warning" /><!-- Prefer null over empty array. -->
		<Rule Id="REFL025" Action="Warning" /><!-- Use correct arguments. -->
		<Rule Id="REFL026" Action="Warning" /><!-- No parameterless constructor defined for this object. -->
		<Rule Id="REFL027" Action="Warning" /><!-- Prefer Type.EmptyTypes. -->
		<Rule Id="REFL028" Action="Warning" /><!-- Cast return value to correct type. -->
		<Rule Id="REFL029" Action="Warning" /><!-- Specify types in case an overload is added in the future. -->
		<Rule Id="REFL030" Action="Warning" /><!-- Use correct obj parameter. -->
		<Rule Id="REFL031" Action="Warning" /><!-- Use generic arguments that satisfies the type parameters. -->
		<Rule Id="REFL032" Action="Warning" /><!-- The dependency does not exist. -->
		<Rule Id="REFL033" Action="Warning" /><!-- Use the same type as the parameter. -->
		<Rule Id="REFL034" Action="Warning" /><!-- Don't call MakeGeneric when not a generic definition. -->
		<Rule Id="REFL035" Action="Warning" /><!-- Don't call Invoke on a generic definition. -->
		<Rule Id="REFL036" Action="Warning" /><!-- Pass 'throwOnError: true' or check if null. -->
		<Rule Id="REFL037" Action="Warning" /><!-- The type does not exist. -->
		<Rule Id="REFL038" Action="Warning" /><!-- Prefer RuntimeHelpers.RunClassConstructor. -->
		<Rule Id="REFL039" Action="Warning" /><!-- Prefer typeof(...) over instance.GetType when the type is sealed. -->
		<Rule Id="REFL040" Action="Warning" /><!-- Prefer type.IsInstanceOfType(...). -->
		<Rule Id="REFL041" Action="Warning" /><!-- Delegate type is not matching. -->
		<Rule Id="REFL042" Action="Warning" /><!-- First argument must be reference type. -->
		<Rule Id="REFL043" Action="Warning" /><!-- First argument must match type. -->
		<Rule Id="REFL044" Action="Warning" /><!-- Expected attribute type. -->
		<Rule Id="REFL045" Action="Warning" /><!-- These flags are insufficient to match any members. -->
		<Rule Id="REFL046" Action="Warning" /><!-- The specified default member does not exist. -->
	</Rules>

	<Rules AnalyzerId="IDisposableAnalyzers" RuleNamespace="IDisposableAnalyzers">
		<Rule Id="IDISP001" Action="Warning" /><!-- Dispose created. -->
		<Rule Id="IDISP002" Action="Warning" /><!-- Dispose member. -->
		<Rule Id="IDISP003" Action="Warning" /><!-- Dispose previous before re-assigning. -->
		<Rule Id="IDISP004" Action="Warning" /><!-- Don't ignore created IDisposable. -->
		<Rule Id="IDISP005" Action="Warning" /><!-- Return type should indicate that the value should be disposed. -->
		<Rule Id="IDISP006" Action="Warning" /><!-- Implement IDisposable. -->
		<Rule Id="IDISP007" Action="Warning" /><!-- Don't dispose injected. -->
		<Rule Id="IDISP008" Action="Warning" /><!-- Don't assign member with injected and created disposables. -->
		<Rule Id="IDISP009" Action="Warning" /><!-- Add IDisposable interface. -->
		<Rule Id="IDISP010" Action="Warning" /><!-- Call base.Dispose(disposing) -->
		<Rule Id="IDISP011" Action="Warning" /><!-- Don't return disposed instance. -->
		<Rule Id="IDISP012" Action="Warning" /><!-- Property should not return created disposable. -->
		<Rule Id="IDISP013" Action="Warning" /><!-- Await in using. -->
		<Rule Id="IDISP014" Action="Warning" /><!-- Use a single instance of HttpClient. -->
		<Rule Id="IDISP015" Action="Warning" /><!-- Member should not return created and cached instance. -->
		<Rule Id="IDISP016" Action="Warning" /><!-- Don't use disposed instance. -->
		<Rule Id="IDISP017" Action="Warning" /><!-- Prefer using. -->
		<Rule Id="IDISP018" Action="Warning" /><!-- Call SuppressFinalize. -->
		<Rule Id="IDISP019" Action="Warning" /><!-- Call SuppressFinalize. -->
		<Rule Id="IDISP020" Action="Warning" /><!-- Call SuppressFinalize with this. -->
		<Rule Id="IDISP021" Action="Warning" /><!-- Call this.Dispose(true). -->
		<Rule Id="IDISP022" Action="Warning" /><!-- Call this.Dispose(false). -->
		<Rule Id="IDISP023" Action="Warning" /><!-- Don't use reference types in finalizer context. -->
	</Rules>

	<Rules AnalyzerId="DocumentationAnalyzers" RuleNamespace="DocumentationAnalyzers">
		<Rule Id="DOC200" Action="Warning" /><!-- The documentation for the element an HTML element equivalent to a known XML documentation element. -->
		<Rule Id="DOC201" Action="Warning" /><!-- The documentation for an `<item>` within a `<list>` did not include the required `<term>` and/or `<description>` elements. -->
		<Rule Id="DOC202" Action="Warning" /><!-- The documentation contains a section element where a block or inline element was expected. -->
		<Rule Id="DOC203" Action="Warning" /><!-- The documentation contains a block element where a section or inline element was expected. -->
		<Rule Id="DOC204" Action="Warning" /><!-- The documentation contains an inline element where a section or block element was expected. -->
		<Rule Id="DOC207" Action="Warning" /><!-- The documentation contains a `<see langword="..."/>` element with an unrecognized keyword. -->
		<Rule Id="DOC209" Action="Warning" /><!-- The documentation contains a `<see href="..."/>` element with an unrecognized URI. -->
	</Rules>

</RuleSet>