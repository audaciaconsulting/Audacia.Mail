# NOTE: Requires **VS2019 16.3** or later

# Default Rules
# Description: CodeAnalysis.ruleset

root = true

# Code files
[*.cs]


# Private fields should be prefixed with an underscore.
dotnet_diagnostic.ACL1000.severity = warning

# Variable declaration uses a magic number.
dotnet_diagnostic.ACL1001.severity = warning

# Methods should not exceed a predefined number of statements.
dotnet_diagnostic.ACL1002.severity = warning

# Don't declare signatures with more than a predefined number of parameters
dotnet_diagnostic.ACL1003.severity = warning

# Don't use abbreviations
dotnet_diagnostic.ACL1004.severity = warning
dotnet_diagnostic.ACL1004.exclude_lambdas = true
dotnet_diagnostic.ACL1004.allowed_loop_variables = i,j

# [NAMING] Asynchronous method name should be suffixed with 'Async' *** Suppress as covered by RCS1046; ACL1005 is only used in the AspNetCore ruleset ***
dotnet_diagnostic.ACL1005.severity = none

# [STYLE] Code block should have braces, excluding null argument checks
dotnet_diagnostic.ACL1006.severity = warning

# ACL1007: ThenByDescending follows OrderBy or OrderByDescending.
dotnet_diagnostic.ACL1007.severity = suggestion

# A class or interface should have a single purpose
dotnet_diagnostic.AV1000.severity = warning

# Avoid static classes *** Suppress as a bit over-zealous ***
dotnet_diagnostic.AV1008.severity = none

# Don't suppress compiler warnings using the new keyword
dotnet_diagnostic.AV1010.severity = warning

# A property, method or local function should do only one thing
dotnet_diagnostic.AV1115.severity = warning

# Return type in method signature should be a collection interface instead of a concrete type
dotnet_diagnostic.AV1130.severity = warning

# Properties, arguments and return values representing strings, collections or tasks should never be `null`
dotnet_diagnostic.AV1135.severity = warning

# Don't swallow errors by catching generic exceptions *** Suppress as covered by CA1031 ***
dotnet_diagnostic.AV1210.severity = none

# Use a protected virtual method to raise each event
dotnet_diagnostic.AV1225.severity = warning

# Don't pass null as the sender argument when raising an event
dotnet_diagnostic.AV1235.severity = warning

# Evaluate the result of a LINQ expression before returning it
dotnet_diagnostic.AV1250.severity = warning

# Methods should not exceed a predefined number of statements *** Suppress as covered by custom analyzer ACL1002 that excludes null checks from statement count ***
dotnet_diagnostic.AV1500.severity = none

# Avoid conditions with double negatives
dotnet_diagnostic.AV1502.severity = warning

# Name assemblies after their contained namespace
dotnet_diagnostic.AV1505.severity = warning

# Name a source file to the type it contains *** Suppress as covered by SA1300 ***
dotnet_diagnostic.AV1506.severity = none

# Limit the contents of a source code file to one type *** Suppress as covered by SA1402 ***
dotnet_diagnostic.AV1507.severity = none

# Assign each variable in a separate statement *** Suppress as covered by RCS1081 ***
dotnet_diagnostic.AV1522.severity = none

# Don't change a loop variable inside a for loop
dotnet_diagnostic.AV1530.severity = warning

# Avoid nested loops
dotnet_diagnostic.AV1532.severity = suggestion

# Always add a block after the keywords if, else, do, while, for, foreach and case *** Suppress as covered by RCS1007 ***
dotnet_diagnostic.AV1535.severity = none

# Always add a default block after the last case in a switch statement
dotnet_diagnostic.AV1536.severity = warning

# Finish every if-else-if statement with an else clause *** Suppress as not always the case ***
dotnet_diagnostic.AV1537.severity = none

# Call the more overloaded method from other overloads
dotnet_diagnostic.AV1551.severity = warning

# Avoid using named arguments
dotnet_diagnostic.AV1555.severity = none

# Don't declare signatures with more than a predefined number of parameters *** Suppress as covered by custom analyzer ACL1003 ***
dotnet_diagnostic.AV1561.severity = none

# Don't use ref or out parameters
dotnet_diagnostic.AV1562.severity = warning

# Avoid signatures that take a bool parameter
dotnet_diagnostic.AV1564.severity = warning

# Don't use parameters as temporary variables
dotnet_diagnostic.AV1568.severity = suggestion

# Don't include numbers in variables, parameters and type members
dotnet_diagnostic.AV1704.severity = warning

# Don't use abbreviations *** Suppressed as covered by the more configurable ACL1004 ***
dotnet_diagnostic.AV1706.severity = none

# Name types using nouns, noun phrases or adjective phrases
dotnet_diagnostic.AV1708.severity = warning

# Don't repeat the name of a class or enumeration in its members
dotnet_diagnostic.AV1710.severity = warning

# Name members similarly to members of related .NET Framework classes
dotnet_diagnostic.AV1711.severity = warning

# Avoid short names or names that can be mistaken for other names
dotnet_diagnostic.AV1712.severity = warning

# Properly name properties
dotnet_diagnostic.AV1715.severity = suggestion

# Prefix an event handler with 'On'
dotnet_diagnostic.AV1738.severity = warning

# Use an underscore for irrelevant lambda parameters
dotnet_diagnostic.AV1739.severity = warning

# Group extension methods in a class suffixed with Extensions
dotnet_diagnostic.AV1745.severity = warning

# Postfix asynchronous methods with Async or TaskAsync *** Suppress as covered by RCS1046 ***
dotnet_diagnostic.AV1755.severity = none

# Prefer language syntax over explicit calls to underlying implementations
dotnet_diagnostic.AV2202.severity = warning

# Build with the highest warning level
dotnet_diagnostic.AV2210.severity = suggestion

# Avoid LINQ query syntax for simple expressions
dotnet_diagnostic.AV2220.severity = none

# Only use the dynamic keyword when talking to a dynamic object
dotnet_diagnostic.AV2230.severity = warning

# Favor async/await over Task continuations
dotnet_diagnostic.AV2235.severity = warning

# Document all public, protected and internal types and members
dotnet_diagnostic.AV2305.severity = none

# Avoid inline comments
dotnet_diagnostic.AV2310.severity = none

# Don't use comments for tracking work to be done later
dotnet_diagnostic.AV2318.severity = warning

# Do not use #region *** Suppress as covered by SA1124 ***
dotnet_diagnostic.AV2407.severity = none

# [DESIGN] Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = warning

# [DESIGN] Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# [DESIGN] Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning

# [DESIGN] Enums should have zero value
dotnet_diagnostic.CA1008.severity = warning

# [DESIGN] Collections should implement generic interface
dotnet_diagnostic.CA1010.severity = warning

# [DESIGN] Abstract types should not have constructors *** Suppress as covered by RCS1160 ***
dotnet_diagnostic.CA1012.severity = none

# [DESIGN] Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = suggestion

# [DESIGN] Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = none

# [DESIGN] Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = none

# [DESIGN] Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# [DESIGN] Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = warning

# [DESIGN] Use properties where appropriate
dotnet_diagnostic.CA1024.severity = warning

# [DESIGN] Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = none

# [DESIGN] Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = none

# [DESIGN] Use events where appropriate
dotnet_diagnostic.CA1030.severity = none

# [DESIGN] Do not catch general exception types
dotnet_diagnostic.CA1031.severity = warning

# [DESIGN] Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = suggestion

# [DESIGN] Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# [DESIGN] Nested types should not be visible
dotnet_diagnostic.CA1034.severity = warning

# [DESIGN] Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning

# [DESIGN] Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = none

# [DESIGN] Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# [DESIGN] Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = none

# [DESIGN] Properties should not be write only
dotnet_diagnostic.CA1044.severity = warning

# [DESIGN] Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning

# [DESIGN] Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning

# [DESIGN] Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = none

# [DESIGN] Uri parameters should not be strings
dotnet_diagnostic.CA1054.severity = warning

# [DESIGN] Uri return values should not be strings
dotnet_diagnostic.CA1055.severity = warning

# [DESIGN] Uri properties should not be strings
dotnet_diagnostic.CA1056.severity = warning

# [DESIGN] Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = none

# [DESIGN] Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# [DESIGN] Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = suggestion

# [DESIGN] Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = warning

# [DESIGN] Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning

# [DESIGN] Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# [DESIGN] Type {0} should implement IEquatable<T> because it overrides Equals
dotnet_diagnostic.CA1066.severity = warning

# [DESIGN] Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = warning

# [DESIGN] CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# [DOCUMENTATION] Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = warning

# [GLOBALIZATION] Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = none

# [GLOBALIZATION] Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning

# [GLOBALIZATION] Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# [GLOBALIZATION] Specify StringComparison
dotnet_diagnostic.CA1307.severity = warning

# [GLOBALIZATION] Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = warning

# [GLOBALIZATION] Use ordinal stringcomparison
dotnet_diagnostic.CA1309.severity = warning

# [INTEROPERABILITY] P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# [MAINTAINABILITY] Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# [MAINTAINABILITY] Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning

# [MAINTAINABILITY] Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning

# [MAINTAINABILITY] Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning

# [MAINTAINABILITY] Use nameof to express symbol names
dotnet_diagnostic.CA1507.severity = warning

# [MAINTAINABILITY] Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = none

# [MAINTAINABILITY] Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = warning

# [NAMING] Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = warning

# [NAMING] Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = warning

# [NAMING] Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = warning

# [NAMING] Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = warning

# [NAMING] Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = warning

# [NAMING] Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = warning

# [NAMING] Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = warning

# [NAMING] Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = warning

# [NAMING] Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = warning

# [NAMING] Identifier contains type name
dotnet_diagnostic.CA1720.severity = warning

# [NAMING] Property names should not match get methods
dotnet_diagnostic.CA1721.severity = warning

# [NAMING] Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = warning

# [NAMING] Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# [USAGE] Review unused parameters
dotnet_diagnostic.CA1801.severity = warning

# [PERFORMANCE] Use literals where appropriate
dotnet_diagnostic.CA1802.severity = warning

# [PERFORMANCE] Do not ignore method results
dotnet_diagnostic.CA1806.severity = warning

# [PERFORMANCE] Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = warning

# [PERFORMANCE] Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = warning

# [PERFORMANCE] Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = warning

# [PERFORMANCE] Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = none

# [PERFORMANCE] Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning

# [USAGE] Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1816.severity = warning

# [PERFORMANCE] Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning

# [PERFORMANCE] Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# [PERFORMANCE] Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# [PERFORMANCE] Mark members as static
dotnet_diagnostic.CA1822.severity = warning

# [PERFORMANCE] Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# [PERFORMANCE] Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = none

# [PERFORMANCE] Avoid zero-length array allocations.
dotnet_diagnostic.CA1825.severity = warning

# [PERFORMANCE] Do not use Enumerable methods on indexable collections. Instead use the collection directly
dotnet_diagnostic.CA1826.severity = warning

# [PERFORMANCE] Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning

# [PERFORMANCE] Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1828.severity = warning

# [PERFORMANCE] Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1829.severity = warning

# [RELIABILITY] Dispose objects before losing scope *** Suppress as covered by IDISP004 ***
dotnet_diagnostic.CA2000.severity = none

# [RELIABILITY] Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# [RELIABILITY] Consider calling ConfigureAwait on the awaited task *** Suppress and only enforce for library code ***
dotnet_diagnostic.CA2007.severity = none

# [RELIABILITY] Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = none

# [RELIABILITY] Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# [RELIABILITY] Always consume the value returned by methods marked with PreserveSigAttribute
dotnet_diagnostic.CA2010.severity = warning

# [SECURITY] Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# [GLOBALIZATION] Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

# [SECURITY] Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = warning

# [USAGE] Rethrow to preserve stack details.
dotnet_diagnostic.CA2200.severity = warning

# [USAGE] Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning

# [USAGE] Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# [USAGE] Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# [USAGE] Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# [USAGE] Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# [USAGE] Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# [USAGE] Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = warning

# [USAGE] Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = none

# [USAGE] Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = warning

# [USAGE] Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2219.severity = warning

# [USAGE] Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = warning

# [USAGE] Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = warning

# [USAGE] Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = warning

# [USAGE] Collection properties should be read only
dotnet_diagnostic.CA2227.severity = suggestion

# [USAGE] Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# [USAGE] Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = warning

# [USAGE] Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = warning

# [USAGE] Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# [USAGE] Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = warning

# [USAGE] Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# [USAGE] Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning

# [USAGE] Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = warning

# [USAGE] Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = warning

# [USAGE] Do not assign a property to itself.
dotnet_diagnostic.CA2245.severity = warning

# [USAGE] Assigning symbol and its member in the same statement.
dotnet_diagnostic.CA2246.severity = warning

# [SECURITY] Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = warning

# [SECURITY] Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = warning

# [SECURITY] Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = warning

# [SECURITY] Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = warning

# [SECURITY] Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = warning

# [SECURITY] Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = warning

# [SECURITY] Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = warning

# [SECURITY] Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = warning

# [SECURITY] Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = warning

# [SECURITY] Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = warning

# [SECURITY] Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = warning

# [SECURITY] Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = warning

# [SECURITY] Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = warning

# [SECURITY] Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = warning

# [SECURITY] Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = warning

# [SECURITY] Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = warning

# [SECURITY] Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = warning

# [SECURITY] Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = warning

# [SECURITY] Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = warning

# [SECURITY] Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = warning

# [SECURITY] Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning

# [SECURITY] Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = warning

# [SECURITY] Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = warning

# [SECURITY] Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning

# [SECURITY] Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning

# [SECURITY] Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning

# [SECURITY] Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning

# [SECURITY] Do Not Add Schema By URL
dotnet_diagnostic.CA3061.severity = warning

# [SECURITY] Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = warning

# [SECURITY] Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = warning

# [SECURITY] Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5358.severity = warning

# [SECURITY] Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = warning

# [SECURITY] Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5360.severity = warning

# [SECURITY] Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5361.severity = warning

# [SECURITY] Do Not Refer Self In Serializable Class
dotnet_diagnostic.CA5362.severity = warning

# [SECURITY] Do Not Disable Request Validation
dotnet_diagnostic.CA5363.severity = warning

# [SECURITY] Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5364.severity = warning

# [SECURITY] Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = warning

# [SECURITY] Use XmlReader For DataSet Read Xml
dotnet_diagnostic.CA5366.severity = warning

# [SECURITY] Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5367.severity = warning

# [SECURITY] Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = warning

# [SECURITY] Use XmlReader For Deserialize
dotnet_diagnostic.CA5369.severity = warning

# [SECURITY] Use XmlReader For Validating Reader
dotnet_diagnostic.CA5370.severity = warning

# [SECURITY] Use XmlReader For Schema Read
dotnet_diagnostic.CA5371.severity = warning

# [SECURITY] Use XmlReader For XPathDocument
dotnet_diagnostic.CA5372.severity = warning

# [SECURITY] Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = warning

# [SECURITY] Do Not Use XslTransform
dotnet_diagnostic.CA5374.severity = warning

# [SECURITY] Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5375.severity = warning

# [SECURITY] Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = warning

# [SECURITY] Use Container Level Access Policy
dotnet_diagnostic.CA5377.severity = warning

# [SECURITY] Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = warning

# [SECURITY] Do Not Use Weak Key Derivation Function Algorithm
dotnet_diagnostic.CA5379.severity = warning

# [SECURITY] Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5380.severity = warning

# [SECURITY] Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5381.severity = warning

# [SECURITY] Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5382.severity = warning

# [SECURITY] Ensure Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5383.severity = warning

# [SECURITY] Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5384.severity = warning

# [SECURITY] Use Rivestâ€“Shamirâ€“Adleman (RSA) Algorithm With Sufficient Key Size
dotnet_diagnostic.CA5385.severity = warning

# [SECURITY] Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = warning

# [SECURITY] Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
dotnet_diagnostic.CA5387.severity = warning

# [SECURITY] Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
dotnet_diagnostic.CA5388.severity = warning

# [SECURITY] Do Not Add Archive Item's Path To The Target File System Path
dotnet_diagnostic.CA5389.severity = warning

# [SECURITY] Do Not Hard Code Encryption Key
dotnet_diagnostic.CA5390.severity = warning

# [SECURITY] Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = warning

# [SECURITY] Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = warning

# [SECURITY] Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = warning

# [SECURITY] Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = none

# [SECURITY] Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = warning

# [SECURITY] Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = warning

# [SECURITY] Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = warning

# [SECURITY] Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5398.severity = warning

# [SECURITY] Definitely disable HttpClient certificate revocation list check
dotnet_diagnostic.CA5399.severity = warning

# [SECURITY] Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = warning

# A <remarks> or <note> documentation element contains content which is not wrapped in a block-level element.
dotnet_diagnostic.DOC100.severity = warning

# A documentation element contains some children which are block-level elements, but other children which are not.
dotnet_diagnostic.DOC101.severity = warning

# The documentation for the element contains inline text, but the documentation for a sibling element of the same kind uses block-level elements.
dotnet_diagnostic.DOC102.severity = warning

# The documentation contains an unnecessary or unrecognized HTML character entity.
dotnet_diagnostic.DOC103.severity = warning

# The contains a language keyword reference using <c>keyword</c> that can be converted to the preferred form <see langword="keyword"/>.
dotnet_diagnostic.DOC104.severity = warning

# The contains a parameter reference using <c>name</c> that can be converted to the preferred form <paramref name="name"/>.
dotnet_diagnostic.DOC105.severity = warning

# The contains a type parameter reference using <c>T</c> that can be converted to the preferred form <typeparamref name="T"/>.
dotnet_diagnostic.DOC106.severity = warning

# The contains a code element reference using <c>name</c> that can be converted to the preferred form <see cref="name"/>.
dotnet_diagnostic.DOC107.severity = warning

# The documentation contains an empty paragraph element (<para/> or <p/>) used as a paragraph separator.
dotnet_diagnostic.DOC108.severity = warning

# The documentation for the element an HTML element equivalent to a known XML documentation element.
dotnet_diagnostic.DOC200.severity = warning

# The documentation for an `<item>` within a `<list>` did not include the required `<term>` and/or `<description>` elements.
dotnet_diagnostic.DOC201.severity = warning

# The documentation contains a section element where a block or inline element was expected.
dotnet_diagnostic.DOC202.severity = warning

# The documentation contains a block element where a section or inline element was expected.
dotnet_diagnostic.DOC203.severity = warning

# The documentation contains an inline element where a section or block element was expected.
dotnet_diagnostic.DOC204.severity = warning

# The documentation contains a `<see langword="..."/>` element with an unrecognized keyword.
dotnet_diagnostic.DOC207.severity = warning

# The documentation contains a `<see href="..."/>` element with an unrecognized URI.
dotnet_diagnostic.DOC209.severity = warning

# Dispose created.
dotnet_diagnostic.IDISP001.severity = warning

# Dispose member.
dotnet_diagnostic.IDISP002.severity = warning

# Dispose previous before re-assigning.
dotnet_diagnostic.IDISP003.severity = warning

# Don't ignore created IDisposable.
dotnet_diagnostic.IDISP004.severity = warning

# Return type should indicate that the value should be disposed.
dotnet_diagnostic.IDISP005.severity = warning

# Implement IDisposable.
dotnet_diagnostic.IDISP006.severity = warning

# Don't dispose injected.
dotnet_diagnostic.IDISP007.severity = warning

# Don't assign member with injected and created disposables.
dotnet_diagnostic.IDISP008.severity = warning

# Add IDisposable interface.
dotnet_diagnostic.IDISP009.severity = warning

# Call base.Dispose(disposing)
dotnet_diagnostic.IDISP010.severity = warning

# Don't return disposed instance.
dotnet_diagnostic.IDISP011.severity = warning

# Property should not return created disposable.
dotnet_diagnostic.IDISP012.severity = warning

# Await in using.
dotnet_diagnostic.IDISP013.severity = warning

# Use a single instance of HttpClient.
dotnet_diagnostic.IDISP014.severity = warning

# Member should not return created and cached instance.
dotnet_diagnostic.IDISP015.severity = warning

# Don't use disposed instance.
dotnet_diagnostic.IDISP016.severity = warning

# Prefer using.
dotnet_diagnostic.IDISP017.severity = warning

# Call SuppressFinalize.
dotnet_diagnostic.IDISP018.severity = warning

# Call SuppressFinalize.
dotnet_diagnostic.IDISP019.severity = warning

# Call SuppressFinalize with this.
dotnet_diagnostic.IDISP020.severity = warning

# Call this.Dispose(true).
dotnet_diagnostic.IDISP021.severity = warning

# Call this.Dispose(false).
dotnet_diagnostic.IDISP022.severity = warning

# Don't use reference types in finalizer context.
dotnet_diagnostic.IDISP023.severity = warning

# [STYLE] Add braces (when expression spans over multiple lines)
dotnet_diagnostic.RCS1001.severity = warning

# [STYLE] Remove braces
dotnet_diagnostic.RCS1002.severity = none

# [STYLE] Add braces to if-else (when expression spans over multiple lines)
dotnet_diagnostic.RCS1003.severity = warning

# [STYLE] Remove braces from if-else
dotnet_diagnostic.RCS1004.severity = none

# [SIMPLIFICATION] Simplify nested using statement
dotnet_diagnostic.RCS1005.severity = warning

# [SIMPLIFICATION] Merge else clause with nested if statement
dotnet_diagnostic.RCS1006.severity = warning

# [STYLE] Add braces *** Suppress as covered by ACL1006 ***
dotnet_diagnostic.RCS1007.severity = none

# [READABILITY] Use explicit type instead of 'var' (when the type is not obvious)
dotnet_diagnostic.RCS1008.severity = none

# [READABILITY] Use explicit type instead of 'var' (foreach variable)
dotnet_diagnostic.RCS1009.severity = none

# [SIMPLIFICATION] Use 'var' instead of explicit type (when the type is obvious)
dotnet_diagnostic.RCS1010.severity = warning

# [READABILITY] Use explicit type instead of 'var' (when the type is obvious)
dotnet_diagnostic.RCS1012.severity = none

# [USAGE] Use predefined type
dotnet_diagnostic.RCS1013.severity = warning

# [READABILITY] Avoid implicitly-typed array
dotnet_diagnostic.RCS1014.severity = none

# [MAINTAINABILITY] Use nameof operator
dotnet_diagnostic.RCS1015.severity = warning

# [USAGE] Use expression-bodied member
dotnet_diagnostic.RCS1016.severity = suggestion

# [STYLE] Avoid multiline expression body
dotnet_diagnostic.RCS1017.severity = none

# [READABILITY] Add default access modifier
dotnet_diagnostic.RCS1018.severity = warning

# [READABILITY] Order modifiers *** Suppressed as covered by SA1206 ***
dotnet_diagnostic.RCS1019.severity = none

# [SIMPLIFICATION] Simplify Nullable\<T> to T? *** Suppressed as covered by SA1125 ***
dotnet_diagnostic.RCS1020.severity = none

# [SIMPLIFICATION] Simplify lambda expression
dotnet_diagnostic.RCS1021.severity = suggestion

# [FORMATTING] Format empty block
dotnet_diagnostic.RCS1023.severity = none

# [FORMATTING] Format accessor list
dotnet_diagnostic.RCS1024.severity = warning

# [FORMATTING] Add new line before enum member
dotnet_diagnostic.RCS1025.severity = none

# [FORMATTING] Add new line before statement
dotnet_diagnostic.RCS1026.severity = warning

# [FORMATTING] Add new line before embedded statement
dotnet_diagnostic.RCS1027.severity = none

# [FORMATTING] Add new line after switch label
dotnet_diagnostic.RCS1028.severity = none

# [FORMATTING] Format binary operator on next line
dotnet_diagnostic.RCS1029.severity = none

# [FORMATTING] Add empty line after embedded statement
dotnet_diagnostic.RCS1030.severity = warning

# [REDUNDANCY] Remove unnecessary braces
dotnet_diagnostic.RCS1031.severity = suggestion

# [REDUNDANCY] Remove redundant parentheses
dotnet_diagnostic.RCS1032.severity = warning

# [REDUNDANCY] Remove redundant boolean literal
dotnet_diagnostic.RCS1033.severity = warning

# [REDUNDANCY] Remove redundant 'sealed' modifier
dotnet_diagnostic.RCS1034.severity = warning

# [REDUNDANCY] Remove redundant comma in initializer
dotnet_diagnostic.RCS1035.severity = warning

# [REDUNDANCY] Remove redundant empty line
dotnet_diagnostic.RCS1036.severity = warning

# [REDUNDANCY] Remove trailing white-space
dotnet_diagnostic.RCS1037.severity = none

# [REDUNDANCY] Remove empty statement
dotnet_diagnostic.RCS1038.severity = warning

# [REDUNDANCY] Remove argument list from attribute
dotnet_diagnostic.RCS1039.severity = warning

# [REDUNDANCY] Remove empty else clause
dotnet_diagnostic.RCS1040.severity = warning

# [REDUNDANCY] Remove empty initializer
dotnet_diagnostic.RCS1041.severity = warning

# [REDUNDANCY] Remove enum default underlying type
dotnet_diagnostic.RCS1042.severity = warning

# [REDUNDANCY] Remove 'partial' modifier from type with a single part
dotnet_diagnostic.RCS1043.severity = warning

# [MAINTAINABILITY] Remove original exception from throw statement
dotnet_diagnostic.RCS1044.severity = warning

# [NAMING] Rename private field according to camel case with underscore *** Suppress as applies itself to static readonly fields ***
dotnet_diagnostic.RCS1045.severity = none

# [NAMING] Asynchronous method name should end with 'Async'
dotnet_diagnostic.RCS1046.severity = warning

# [NAMING] Non-asynchronous method name should not end with 'Async'
dotnet_diagnostic.RCS1047.severity = warning

# [USAGE] Use lambda expression instead of anonymous method
dotnet_diagnostic.RCS1048.severity = warning

# [SIMPLIFICATION] Simplify boolean comparison
dotnet_diagnostic.RCS1049.severity = warning

# [STYLE] Add argument list to object creation expression
dotnet_diagnostic.RCS1050.severity = none

# [STYLE] Parenthesize condition in conditional expression
dotnet_diagnostic.RCS1051.severity = none

# [READABILITY] Declare each attribute separately
dotnet_diagnostic.RCS1052.severity = none

# [REDUNDANCY] Avoid semicolon at the end of declaration
dotnet_diagnostic.RCS1055.severity = warning

# [READABILITY] Avoid usage of using alias directive
dotnet_diagnostic.RCS1056.severity = none

# [FORMATTING] Add empty line between declarations
dotnet_diagnostic.RCS1057.severity = warning

# [SIMPLIFICATION] Use compound assignment
dotnet_diagnostic.RCS1058.severity = warning

# [DESIGN] Avoid locking on publicly accessible instance
dotnet_diagnostic.RCS1059.severity = warning

# [MAINTAINABILITY] Declare each type in separate file
dotnet_diagnostic.RCS1060.severity = none

# [SIMPLIFICATION] Merge if statement with nested if statement
dotnet_diagnostic.RCS1061.severity = warning

# [REDUNDANCY] Avoid interpolated string with no interpolation
dotnet_diagnostic.RCS1062.severity = warning

# [STYLE] Avoid usage of do statement to create an infinite loop
dotnet_diagnostic.RCS1063.severity = warning

# [STYLE] Avoid usage of for statement to create an infinite loop
dotnet_diagnostic.RCS1064.severity = warning

# [STYLE] Avoid usage of while statement to create an inifinite loop
dotnet_diagnostic.RCS1065.severity = none

# [REDUNDANCY] Remove empty finally clause
dotnet_diagnostic.RCS1066.severity = warning

# [STYLE] Remove argument list from object creation expression
dotnet_diagnostic.RCS1067.severity = warning

# [SIMPLIFICATION] Simplify logical negation
dotnet_diagnostic.RCS1068.severity = warning

# [REDUNDANCY] Remove unnecessary case label
dotnet_diagnostic.RCS1069.severity = warning

# [REDUNDANCY] Remove redundant default switch section
dotnet_diagnostic.RCS1070.severity = warning

# [REDUNDANCY] Remove redundant base constructor call
dotnet_diagnostic.RCS1071.severity = warning

# [REDUNDANCY] Remove empty namespace declaration
dotnet_diagnostic.RCS1072.severity = warning

# [SIMPLIFICATION] Replace if statement with return statement
dotnet_diagnostic.RCS1073.severity = warning

# [REDUNDANCY] Remove redundant constructor
dotnet_diagnostic.RCS1074.severity = warning

# [DESIGN] Avoid empty catch clause that catches System.Exception
dotnet_diagnostic.RCS1075.severity = warning

# [FORMATTING] Format declaration braces
dotnet_diagnostic.RCS1076.severity = none

# [PERFORMANCE] Optimize LINQ method call
dotnet_diagnostic.RCS1077.severity = warning

# [GENERAL] Use " instead of string.Empty
dotnet_diagnostic.RCS1078.severity = none

# [GENERAL] Throwing of new Not Implemented Exception
dotnet_diagnostic.RCS1079.severity = warning

# [PERFORMANCE] Use 'Count/Length' property instead of 'Any' method
dotnet_diagnostic.RCS1080.severity = none

# [READABILITY] Split variable declaration
dotnet_diagnostic.RCS1081.severity = warning

# [SIMPLIFICATION] Use coalesce expression instead of conditional expression
dotnet_diagnostic.RCS1084.severity = warning

# [SIMPLIFICATION] Use auto-implemented property
dotnet_diagnostic.RCS1085.severity = warning

# [GENERAL] Use linefeed as newline
dotnet_diagnostic.RCS1086.severity = none

# [GENERAL] Use carriage return + linefeed as newline
dotnet_diagnostic.RCS1087.severity = warning

# [GENERAL] Use space(s) instead of tab
dotnet_diagnostic.RCS1088.severity = none

# [SIMPLIFICATION] Use -/++ operator instead of assignment
dotnet_diagnostic.RCS1089.severity = warning

# [DESIGN] Call 'ConfigureAwait(false)' *** Suppress and only enforce for library code ***
dotnet_diagnostic.RCS1090.severity = none

# [REDUNDANCY] Remove empty region
dotnet_diagnostic.RCS1091.severity = warning

# [FORMATTING] Add empty line before 'while' keyword in 'do' statement
dotnet_diagnostic.RCS1092.severity = warning

# [REDUNDANCY] Remove file with no code
dotnet_diagnostic.RCS1093.severity = warning

# [READABILITY] Declare using directive on top level
dotnet_diagnostic.RCS1094.severity = warning

# [PERFORMANCE] Use bitwise operation instead of calling 'HasFlag'
dotnet_diagnostic.RCS1096.severity = suggestion

# [REDUNDANCY] Remove redundant 'ToString' call
dotnet_diagnostic.RCS1097.severity = warning

# [READABILITY] Avoid 'null' on the left side of a binary expression
dotnet_diagnostic.RCS1098.severity = warning

# [READABILITY] Default label should be the last label in a switch section
dotnet_diagnostic.RCS1099.severity = warning

# [FORMATTING] Format documentation summary on a single line
dotnet_diagnostic.RCS1100.severity = none

# [FORMATTING] Format documentation summary on multiple lines
dotnet_diagnostic.RCS1101.severity = none

# [DESIGN] Make class static
dotnet_diagnostic.RCS1102.severity = warning

# [SIMPLIFICATION] Replace if statement with assignment
dotnet_diagnostic.RCS1103.severity = warning

# [SIMPLIFICATION] Simplify conditional expression
dotnet_diagnostic.RCS1104.severity = warning

# [SIMPLIFICATION] Unncessary interpolation
dotnet_diagnostic.RCS1105.severity = warning

# [REDUNDANCY] Remove empty destructor
dotnet_diagnostic.RCS1106.severity = warning

# [REDUNDANCY] Remove redundant 'ToCharArray' call
dotnet_diagnostic.RCS1107.severity = warning

# [READABILITY] Add 'static' modifier to all partial class declarations
dotnet_diagnostic.RCS1108.severity = warning

# [DESIGN] Declare type inside namespace
dotnet_diagnostic.RCS1110.severity = warning

# [SIMPLIFICATION] Combine 'Enumerable.Where' method chain
dotnet_diagnostic.RCS1112.severity = warning

# [GENERAL] Mark local variable as const
dotnet_diagnostic.RCS1118.severity = warning

# [READABILITY] Add parentheses according to operator precedence *** Suppress as clashes with ReSharper default ***
dotnet_diagnostic.RCS1123.severity = none

# [SIMPLIFICATION] Merge local declaration with assignment
dotnet_diagnostic.RCS1127.severity = warning

# [SIMPLIFICATION] Use coalesce expression
dotnet_diagnostic.RCS1128.severity = warning

# [GENERAL] Bitwise operation on enum without Flags attribute
dotnet_diagnostic.RCS1130.severity = warning

# [REDUNDANCY] Remove redundant overriding member
dotnet_diagnostic.RCS1132.severity = warning

# [REDUNDANCY] Remove redundant Dispose/Close call
dotnet_diagnostic.RCS1133.severity = warning

# [REDUNDANCY] Remove redundant statement
dotnet_diagnostic.RCS1134.severity = warning

# [DESIGN] Declare enum member with zero value (when enum has FlagsAttribute)
dotnet_diagnostic.RCS1135.severity = warning

# [MAINTAINABILITY] Add summary to documentation comment *** Suppress as covered by SA1606 ***
dotnet_diagnostic.RCS1138.severity = none

# [MAINTAINABILITY] Add summary element to documentation comment *** Suppress as covered by SA1604 ***
dotnet_diagnostic.RCS1139.severity = none

# [MAINTAINABILITY] Add exception to documentation comment
dotnet_diagnostic.RCS1140.severity = suggestion

# [MAINTAINABILITY] Add 'param' element to documentation comment *** Suppress as covered by SA1611 ***
dotnet_diagnostic.RCS1141.severity = none

# [MAINTAINABILITY] Add 'typeparam' element to documentation comment *** Suppress as covered by SA1618 ***
dotnet_diagnostic.RCS1142.severity = none

# [SIMPLIFICATION] Simplify coalesce expression
dotnet_diagnostic.RCS1143.severity = warning

# [REDUNDANCY] Remove redundant 'as' operator
dotnet_diagnostic.RCS1145.severity = warning

# [USAGE] Use conditional access
dotnet_diagnostic.RCS1146.severity = warning

# [REDUNDANCY] Remove redundant cast
dotnet_diagnostic.RCS1151.severity = warning

# [READABILITY] Sort enum members
dotnet_diagnostic.RCS1154.severity = warning

# [USAGE] Use StringComparison when comparing strings *** Suppress as covered by CA1304 and CA1307 ***
dotnet_diagnostic.RCS1155.severity = none

# [USAGE] Use string.Length instead of comparison with empty string *** Suppress as covered by CA1820 ***
dotnet_diagnostic.RCS1156.severity = none

# [DESIGN] Composite enum value contains undefined flag
dotnet_diagnostic.RCS1157.severity = warning

# [DESIGN] Static member in generic type should use a type parameter *** Suppress as covered by CA1000 ***
dotnet_diagnostic.RCS1158.severity = none

# [USAGE] Use EventHandler<T> *** Suppress as covered by CA1003 ***
dotnet_diagnostic.RCS1159.severity = none

# [DESIGN] Abstract type should not have public constructors
dotnet_diagnostic.RCS1160.severity = warning

# [READABILITY] Enum should declare explicit values
dotnet_diagnostic.RCS1161.severity = suggestion

# [READABILITY] Avoid chain of assignments
dotnet_diagnostic.RCS1162.severity = warning

# [REDUNDANCY] Unused parameter *** Suppress as covered by CA1801 ***
dotnet_diagnostic.RCS1163.severity = none

# [REDUNDANCY] Unused type parameter
dotnet_diagnostic.RCS1164.severity = warning

# [USAGE] Unconstrained type parameter checked for null
dotnet_diagnostic.RCS1165.severity = warning

# [USAGE] Value type object is never equal to null
dotnet_diagnostic.RCS1166.severity = warning

# [MAINTAINABILITY] Parameter name differs from base name *** Suppress as covered by CA1725 ***
dotnet_diagnostic.RCS1168.severity = none

# [DESIGN] Make field read-only
dotnet_diagnostic.RCS1169.severity = warning

# [DESIGN] Use read-only auto-implemented property
dotnet_diagnostic.RCS1170.severity = suggestion

# [SIMPLIFICATION] Simplify lazy initialization
dotnet_diagnostic.RCS1171.severity = warning

# [SIMPLIFICATION] Use 'is' operator instead of 'as' operator
dotnet_diagnostic.RCS1172.severity = warning

# [SIMPLIFICATION] Use coalesce expression instead of if
dotnet_diagnostic.RCS1173.severity = warning

# [REDUNDANCY] Remove redundant async/await
dotnet_diagnostic.RCS1174.severity = warning

# [REDUNDANCY] Unused this parameter
dotnet_diagnostic.RCS1175.severity = suggestion

# [SIMPLIFICATION] Use 'var' instead of explicit type (when the type is not obvious)
dotnet_diagnostic.RCS1176.severity = suggestion

# [SIMPLIFICATION] Use 'var' instead of explicit type (in foreach)
dotnet_diagnostic.RCS1177.severity = suggestion

# [SIMPLIFICATION] Use return instead of assignment
dotnet_diagnostic.RCS1179.severity = suggestion

# [SIMPLIFICATION] Inline lazy initialization *** Suppress as arguably leads to less readable code ***
dotnet_diagnostic.RCS1180.severity = none

# [GENERAL] Convert comment to documentation comment
dotnet_diagnostic.RCS1181.severity = suggestion

# [REDUNDANCY] Remove redundant base interface
dotnet_diagnostic.RCS1182.severity = suggestion

# [FORMATTING] Format initializer with single expression on single line *** Suppress as disagree ***
dotnet_diagnostic.RCS1183.severity = none

# [FORMATTING] Format conditional expression (format ? and : on next line)
dotnet_diagnostic.RCS1184.severity = suggestion

# [FORMATTING] Format single-line block
dotnet_diagnostic.RCS1185.severity = suggestion

# [DESIGN] Use constant instead of field *** Suppress as covered by CA1802 ***
dotnet_diagnostic.RCS1187.severity = none

# [REDUNDANCY] Remove redundant auto-property initialization *** Suppress as disagree ***
dotnet_diagnostic.RCS1188.severity = none

# [SIMPLIFICATION] Join string expressions
dotnet_diagnostic.RCS1190.severity = warning

# [READABILITY] Declare enum value as combination of names
dotnet_diagnostic.RCS1191.severity = suggestion

# [READABILITY] Use regular string literal instead of verbatim string literal
dotnet_diagnostic.RCS1192.severity = warning

# [DESIGN] Overriding member cannot change 'params' modifier
dotnet_diagnostic.RCS1193.severity = warning

# [DESIGN] Implement exception constructors *** Suppress as covered by CA1032 ***
dotnet_diagnostic.RCS1194.severity = none

# [SIMPLIFICATION] Use ^ operator
dotnet_diagnostic.RCS1195.severity = suggestion

# [STYLE] Call extension method as instance method
dotnet_diagnostic.RCS1196.severity = warning

# [PERFORMANCE] Optimize StringBuilder.Append/AppendLine call
dotnet_diagnostic.RCS1197.severity = warning

# [SIMPLIFICATION] Simplify boolean expression
dotnet_diagnostic.RCS1199.severity = warning

# [USAGE] Call 'Enumerable.ThenBy' instead of 'Enumerable.OrderBy'
dotnet_diagnostic.RCS1200.severity = suggestion

# [SIMPLIFICATION] Use method chaining
dotnet_diagnostic.RCS1201.severity = suggestion

# [USAGE] Avoid NullReferenceException
dotnet_diagnostic.RCS1202.severity = warning

# [DESIGN] Use AttributeUsageAttribute *** Suppress as covered by CA1018 ***
dotnet_diagnostic.RCS1203.severity = none

# [USAGE] Use EventArgs.Empty
dotnet_diagnostic.RCS1204.severity = warning

# [READABILITY] Order named arguments according to the order of parameters *** Suppress as named arguments rarely used, and auto-generated EF migrations will violate this ***
dotnet_diagnostic.RCS1205.severity = none

# [USAGE] Use conditional access instead of conditional expression
dotnet_diagnostic.RCS1206.severity = warning

# [SIMPLIFICATION] Use method group instead of anonymous function
dotnet_diagnostic.RCS1207.severity = warning

# [READABILITY] Order type parameter constraints
dotnet_diagnostic.RCS1209.severity = warning

# [USAGE] Return Task.FromResult instead of returning null *** Suppress as covered by AV1135 ***
dotnet_diagnostic.RCS1210.severity = none

# [REDUNDANCY] Remove unnecessary else clause
dotnet_diagnostic.RCS1211.severity = warning

# [REDUNDANCY] Remove unused member declaration
dotnet_diagnostic.RCS1213.severity = warning

# [REDUNDANCY] Expression is always equal to true/false
dotnet_diagnostic.RCS1215.severity = warning

# [REDUNDANCY] Unnecessary unsafe context
dotnet_diagnostic.RCS1216.severity = warning

# [READABILITY] Convert interpolated string to concatenation *** Suppress as disagree ***
dotnet_diagnostic.RCS1217.severity = none

# [READABILITY] Simplify code branching
dotnet_diagnostic.RCS1218.severity = warning

# [PERFORMANCE] Call 'Enumerable.Skip' and 'Enumerable.Any' instead of 'Enumerable.Count'
dotnet_diagnostic.RCS1219.severity = suggestion

# [USAGE] Use pattern matching instead of combination of 'is' operator and cast operator
dotnet_diagnostic.RCS1220.severity = warning

# [USAGE] Use pattern matching instead of combination of 'as' operator and null check
dotnet_diagnostic.RCS1221.severity = warning

# [READABILITY] Merge preprocessor directives
dotnet_diagnostic.RCS1222.severity = suggestion

# [DESIGN] Make method an extension method *** Suppress as covered by AV1008 ***
dotnet_diagnostic.RCS1224.severity = none

# [DESIGN] Make class sealed
dotnet_diagnostic.RCS1225.severity = suggestion

# [USAGE] Add paragraph to documentation comment
dotnet_diagnostic.RCS1226.severity = suggestion

# [DESIGN] Validate arguments correctly
dotnet_diagnostic.RCS1227.severity = warning

# [READABILITY] Unused element in documentation comment
dotnet_diagnostic.RCS1228.severity = suggestion

# [USAGE] Use async/await when necessary
dotnet_diagnostic.RCS1229.severity = warning

# [READABILITY] Order elements in documentation comment
dotnet_diagnostic.RCS1232.severity = suggestion

# [USAGE] Use short-circuiting operator
dotnet_diagnostic.RCS1233.severity = warning

# [READABILITY] Duplicate enum value
dotnet_diagnostic.RCS1234.severity = warning

# [PERFORMANCE] Optimize method call
dotnet_diagnostic.RCS1235.severity = suggestion

# [USAGE] Use exception filter
dotnet_diagnostic.RCS1236.severity = warning

# [USAGE] Use bit shift operator
dotnet_diagnostic.RCS1237.severity = suggestion

# [READABILITY] Avoid nested ?: operators
dotnet_diagnostic.RCS1238.severity = suggestion

# [READABILITY] Use 'for' statement instead of 'while' statement
dotnet_diagnostic.RCS1239.severity = suggestion

# [REDUNDANCY] Operator is unnecessary
dotnet_diagnostic.RCS1240.severity = warning

# [DESIGN] Implement non-generic counterpart
dotnet_diagnostic.RCS1241.severity = warning

# Cast return value to the correct type.
dotnet_diagnostic.REFL001.severity = warning

# Discard the return value.
dotnet_diagnostic.REFL002.severity = warning

# The member does not exist.
dotnet_diagnostic.REFL003.severity = warning

# More than one member is matching the criteria.
dotnet_diagnostic.REFL004.severity = warning

# There is no member matching the filter.
dotnet_diagnostic.REFL005.severity = warning

# The binding flags can be more precise.
dotnet_diagnostic.REFL006.severity = warning

# The binding flags are not in the expected order.
dotnet_diagnostic.REFL007.severity = warning

# Specify binding flags for better performance and less fragile code.
dotnet_diagnostic.REFL008.severity = warning

# The referenced member is not known to exist.
dotnet_diagnostic.REFL009.severity = warning

# Prefer the generic extension method GetCustomAttribute<T>.
dotnet_diagnostic.REFL010.severity = warning

# Duplicate BindingFlag.
dotnet_diagnostic.REFL011.severity = warning

# Prefer Attribute.IsDefined().
dotnet_diagnostic.REFL012.severity = warning

# The member is of the wrong type.
dotnet_diagnostic.REFL013.severity = warning

# Prefer GetMember().AccessorMethod.
dotnet_diagnostic.REFL014.severity = warning

# Use the containing type.
dotnet_diagnostic.REFL015.severity = warning

# Use nameof.
dotnet_diagnostic.REFL016.severity = warning

# Don't use name of wrong member.
dotnet_diagnostic.REFL017.severity = warning

# The member is explicitly implemented.
dotnet_diagnostic.REFL018.severity = warning

# No member matches the types.
dotnet_diagnostic.REFL019.severity = warning

# More than one interface is matching the name.
dotnet_diagnostic.REFL020.severity = warning

# Use fully qualified name.
dotnet_diagnostic.REFL022.severity = warning

# The type does not implement the interface.
dotnet_diagnostic.REFL023.severity = warning

# Prefer null over empty array.
dotnet_diagnostic.REFL024.severity = warning

# Use correct arguments.
dotnet_diagnostic.REFL025.severity = warning

# No parameterless constructor defined for this object.
dotnet_diagnostic.REFL026.severity = warning

# Prefer Type.EmptyTypes.
dotnet_diagnostic.REFL027.severity = warning

# Cast return value to correct type.
dotnet_diagnostic.REFL028.severity = warning

# Specify types in case an overload is added in the future.
dotnet_diagnostic.REFL029.severity = warning

# Use correct obj parameter.
dotnet_diagnostic.REFL030.severity = warning

# Use generic arguments that satisfies the type parameters.
dotnet_diagnostic.REFL031.severity = warning

# The dependency does not exist.
dotnet_diagnostic.REFL032.severity = warning

# Use the same type as the parameter.
dotnet_diagnostic.REFL033.severity = warning

# Don't call MakeGeneric when not a generic definition.
dotnet_diagnostic.REFL034.severity = warning

# Don't call Invoke on a generic definition.
dotnet_diagnostic.REFL035.severity = warning

# Pass 'throwOnError: true' or check if null.
dotnet_diagnostic.REFL036.severity = warning

# The type does not exist.
dotnet_diagnostic.REFL037.severity = warning

# Prefer RuntimeHelpers.RunClassConstructor.
dotnet_diagnostic.REFL038.severity = warning

# Prefer typeof(...) over instance.GetType when the type is sealed.
dotnet_diagnostic.REFL039.severity = warning

# Prefer type.IsInstanceOfType(...).
dotnet_diagnostic.REFL040.severity = warning

# Delegate type is not matching.
dotnet_diagnostic.REFL041.severity = warning

# First argument must be reference type.
dotnet_diagnostic.REFL042.severity = warning

# First argument must match type.
dotnet_diagnostic.REFL043.severity = warning

# Expected attribute type.
dotnet_diagnostic.REFL044.severity = warning

# These flags are insufficient to match any members.
dotnet_diagnostic.REFL045.severity = warning

# The specified default member does not exist.
dotnet_diagnostic.REFL046.severity = warning

# XML comment analysis is disabled due to project configuration.
dotnet_diagnostic.SA0001.severity = none

# The spacing around a C# keyword is incorrect.
dotnet_diagnostic.SA1000.severity = warning

# The spacing around a comma is incorrect, within a C# code file.
dotnet_diagnostic.SA1001.severity = warning

# The spacing around a semicolon is incorrect, within a C# code file.
dotnet_diagnostic.SA1002.severity = warning

# The spacing around an operator symbol is incorrect, within a C# code file.
dotnet_diagnostic.SA1003.severity = warning

# A line within a documentation header above a C# element does not begin with a single space.
dotnet_diagnostic.SA1004.severity = suggestion

# A single-line comment within a C# code file does not begin with a single space.
dotnet_diagnostic.SA1005.severity = suggestion

# A C# preprocessor-type keyword is preceded by space.
dotnet_diagnostic.SA1006.severity = warning

# The operator keyword within a C# operator overload method is not followed by any whitespace.
dotnet_diagnostic.SA1007.severity = warning

# An opening parenthesis within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1008.severity = warning

# A closing parenthesis within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1009.severity = warning

# An opening square bracket within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1010.severity = warning

# A closing square bracket within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1011.severity = warning

# An opening brace within a C# element is not spaced correctly.
dotnet_diagnostic.SA1012.severity = warning

# A closing brace within a C# element is not spaced correctly.
dotnet_diagnostic.SA1013.severity = warning

# An opening generic bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1014.severity = warning

# A closing generic bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1015.severity = warning

# An opening attribute bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1016.severity = warning

# A closing attribute bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1017.severity = warning

# A nullable type symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1018.severity = warning

# The spacing around a member access symbol is incorrect, within a C# code file.
dotnet_diagnostic.SA1019.severity = warning

# An increment or decrement symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1020.severity = warning

# A negative sign within a C# element is not spaced correctly.
dotnet_diagnostic.SA1021.severity = warning

# A positive sign within a C# element is not spaced correctly.
dotnet_diagnostic.SA1022.severity = warning

# A dereference symbol or an access-of symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1023.severity = warning

# A colon within a C# element is not spaced correctly.
dotnet_diagnostic.SA1024.severity = warning

# The code contains multiple whitespace characters in a row.
dotnet_diagnostic.SA1025.severity = warning

# An implicitly typed new array allocation within a C# code file is not spaced correctly.
dotnet_diagnostic.SA1026.severity = warning

# The code contains a tab or space character which is not consistent with the current project settings.
dotnet_diagnostic.SA1027.severity = none

# A line of code ends with a space, tab, or other whitespace characters before the end of line character(s).
dotnet_diagnostic.SA1028.severity = none

# A call to a member from an inherited class begins with `base.`, and the local class does not contain an override or implementation of the member.
dotnet_diagnostic.SA1100.severity = warning

# A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.
dotnet_diagnostic.SA1101.severity = none

# A C# query clause does not begin on the same line as the previous clause, or on the next line.
dotnet_diagnostic.SA1102.severity = warning

# The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.
dotnet_diagnostic.SA1103.severity = warning

# A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.
dotnet_diagnostic.SA1104.severity = warning

# A clause within a C# query expression spans across multiple lines, and does not begin on its own line.
dotnet_diagnostic.SA1105.severity = warning

# The C# code contains an extra semicolon.
dotnet_diagnostic.SA1106.severity = warning

# The C# code contains more than one statement on a single line.
dotnet_diagnostic.SA1107.severity = warning

# A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1108.severity = warning

# A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1109.severity = warning

# The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name.
dotnet_diagnostic.SA1110.severity = warning

# The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter.
dotnet_diagnostic.SA1111.severity = warning

# The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.
dotnet_diagnostic.SA1112.severity = warning

# A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.
dotnet_diagnostic.SA1113.severity = warning

# The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.
dotnet_diagnostic.SA1114.severity = warning

# A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.
dotnet_diagnostic.SA1115.severity = warning

# The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.
dotnet_diagnostic.SA1116.severity = warning

# The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.
dotnet_diagnostic.SA1117.severity = suggestion

# A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.
dotnet_diagnostic.SA1118.severity = warning

# A C# statement contains parenthesis which are unnecessary and should be removed. *** Suppress as redundant parentheses can add structure that makes code more readable ***
dotnet_diagnostic.SA1119.severity = none

# The C# comment does not contain any comment text.
dotnet_diagnostic.SA1120.severity = warning

# The code uses one of the basic C# types, but does not use the built-in alias for the type.
dotnet_diagnostic.SA1121.severity = warning

# The C# code includes an empty string, written as `"`.
dotnet_diagnostic.SA1122.severity = warning

# The C# code contains a region within the body of a code element.
dotnet_diagnostic.SA1123.severity = warning

# The C# code contains a region.
dotnet_diagnostic.SA1124.severity = warning

# The Nullable type has been defined not using the C# shorthand.
dotnet_diagnostic.SA1125.severity = warning

# A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file.
dotnet_diagnostic.SA1126.severity = none

# A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.
dotnet_diagnostic.SA1127.severity = none

# A constructor initializer is on the same line as the constructor declaration, within a C# code file.
dotnet_diagnostic.SA1128.severity = none

# A value type was constructed using the syntax `new T()`.
dotnet_diagnostic.SA1129.severity = warning

# An anonymous method was declared using the form `delegate (parameters) { }`, when a lambda expression would provide equivalent behavior with the syntax `(parameters) => { }`.
dotnet_diagnostic.SA1130.severity = warning

# A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression.
dotnet_diagnostic.SA1131.severity = warning

# Two or more fields were declared in the same field declaration syntax.
dotnet_diagnostic.SA1132.severity = warning

# Two or more attributes appeared within the same set of square brackets.
dotnet_diagnostic.SA1133.severity = none

# An attribute is placed on the same line of code as another attribute or element.
dotnet_diagnostic.SA1134.severity = warning

# A using directive is not qualified.
dotnet_diagnostic.SA1135.severity = none

# Multiple enum values are placed on the same line of code.
dotnet_diagnostic.SA1136.severity = none

# Two sibling elements which each start on their own line have different levels of indentation.
dotnet_diagnostic.SA1137.severity = suggestion

# Use literal suffix notation instead of casting.
dotnet_diagnostic.SA1139.severity = warning

# Use tuple syntax instead of the underlying ValueTuple implementation type.
dotnet_diagnostic.SA1141.severity = warning

# An element of a tuple was referenced by its metadata name when an element name is available.
dotnet_diagnostic.SA1142.severity = warning

# A C# using directive is placed outside of a namespace element.
dotnet_diagnostic.SA1200.severity = none

# An element within a C# code file is out of order in relation to the other elements in the code.
dotnet_diagnostic.SA1201.severity = none

# An element within a C# code file is out of order within regard to access level, in relation to other elements in the code.
dotnet_diagnostic.SA1202.severity = none

# A constant field is placed beneath a non-constant field.
dotnet_diagnostic.SA1203.severity = warning

# A static element is positioned beneath an instance element of the same type.
dotnet_diagnostic.SA1204.severity = none

# The partial element does not have an access modifier defined.
dotnet_diagnostic.SA1205.severity = warning

# The keywords within the declaration of an element do not follow a standard ordering scheme.
dotnet_diagnostic.SA1206.severity = warning

# The keyword *protected* is positioned after the keyword *internal* within the declaration of a protected internal C# element.
dotnet_diagnostic.SA1207.severity = warning

# A using directive which declares a member of the *System* namespace appears after a using directive which declares a member of a different namespace, within a C# code file.
dotnet_diagnostic.SA1208.severity = warning

# A using-alias directive is positioned before a regular using directive.
dotnet_diagnostic.SA1209.severity = warning

# The using directives within a C# code file are not sorted alphabetically by namespace.
dotnet_diagnostic.SA1210.severity = suggestion

# The using-alias directives within a C# code file are not sorted alphabetically by alias name.
dotnet_diagnostic.SA1211.severity = warning

# A get accessor appears after a set accessor within a property or indexer.
dotnet_diagnostic.SA1212.severity = warning

# An add accessor appears after a remove accessor within an event.
dotnet_diagnostic.SA1213.severity = warning

# A readonly field is positioned beneath a non-readonly field.
dotnet_diagnostic.SA1214.severity = warning

# An instance readonly element is positioned beneath an instance non-readonly element of the same type.
dotnet_diagnostic.SA1215.severity = warning

# A `using static` directive is positioned at the wrong location (before a regular using directive or after an alias using directive).
dotnet_diagnostic.SA1216.severity = warning

# The `using static` directives within a C# code file are not sorted alphabetically by full type name.
dotnet_diagnostic.SA1217.severity = warning

# The name of a C# element does not begin with an upper-case letter.
dotnet_diagnostic.SA1300.severity = warning

# There are currently no situations in which this rule will fire.
dotnet_diagnostic.SA1301.severity = none

# The name of a C# interface does not begin with the capital letter I.
dotnet_diagnostic.SA1302.severity = warning

# The name of a constant C# field should begin with an upper-case letter.
dotnet_diagnostic.SA1303.severity = warning

# The name of a non-private readonly C# field should being with an upper-case letter.
dotnet_diagnostic.SA1304.severity = warning

# The name of a field or variable in C# uses Hungarian notation.
dotnet_diagnostic.SA1305.severity = warning

# The name of a field in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1306.severity = warning

# The name of a public or internal field in C# does not begin with an upper-case letter.
dotnet_diagnostic.SA1307.severity = warning

# A field name in C# is prefixed with *m_* or *s_*.
dotnet_diagnostic.SA1308.severity = warning

# A field name in C# begins with an underscore.
dotnet_diagnostic.SA1309.severity = none

# A field name in C# contains an underscore.
dotnet_diagnostic.SA1310.severity = warning

# The name of a static readonly field does not begin with an upper-case letter.
dotnet_diagnostic.SA1311.severity = warning

# The name of a variable in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1312.severity = warning

# The name of a parameter in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1313.severity = warning

# The name of a C# type parameter does not begin with the capital letter T.
dotnet_diagnostic.SA1314.severity = warning

# Element names within a tuple type should have the correct casing.
dotnet_diagnostic.SA1316.severity = warning

# The access modifier for a C# element has not been explicitly defined.
dotnet_diagnostic.SA1400.severity = warning

# A field within a C# class has an access modifier other than private.
dotnet_diagnostic.SA1401.severity = warning

# A C# code file contains more than one unique type.
dotnet_diagnostic.SA1402.severity = suggestion

# A C# code file contains more than one namespace.
dotnet_diagnostic.SA1403.severity = warning

# A Code Analysis SuppressMessage attribute does not include a justification.
dotnet_diagnostic.SA1404.severity = warning

# A call to Debug.Assert in C# code does not include a descriptive message.
dotnet_diagnostic.SA1405.severity = none

# A call to Debug.Fail in C# code does not include a descriptive message.
dotnet_diagnostic.SA1406.severity = warning

# A C# statement contains a complex arithmetic expression which omits parenthesis around operators.
dotnet_diagnostic.SA1407.severity = none

# A C# statement contains a complex conditional expression which omits parenthesis around operators.
dotnet_diagnostic.SA1408.severity = none

# A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.
dotnet_diagnostic.SA1409.severity = warning

# A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.
dotnet_diagnostic.SA1410.severity = warning

# An attribute declaration does not contain any parameters, yet it still includes parenthesis.
dotnet_diagnostic.SA1411.severity = warning

# The encoding of the file is not UTF-8 with byte order mark.
dotnet_diagnostic.SA1412.severity = none

# A multi-line initializer should use a comma on the last item.
dotnet_diagnostic.SA1413.severity = none

# Tuple types appearing in member declarations should have explicitly named tuple elements.
dotnet_diagnostic.SA1414.severity = warning

# The opening or closing brace within a C# statement, element, or expression is not placed on its own line.
dotnet_diagnostic.SA1500.severity = warning

# A C# statement containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1501.severity = none

# A C# element containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1502.severity = none

# The opening and closing braces for a C# statement have been omitted.
dotnet_diagnostic.SA1503.severity = none

# Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.
dotnet_diagnostic.SA1504.severity = none

# An opening brace within a C# element, statement, or expression is followed by a blank line.
dotnet_diagnostic.SA1505.severity = warning

# An element documentation header above a C# element is followed by a blank line.
dotnet_diagnostic.SA1506.severity = warning

# The C# code contains multiple blank lines in a row.
dotnet_diagnostic.SA1507.severity = warning

# A closing brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1508.severity = warning

# An opening brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1509.severity = warning

# Chained C# statements are separated by a blank line.
dotnet_diagnostic.SA1510.severity = warning

# The while footer at the bottom of a do-while statement is separated from the statement by a blank line.
dotnet_diagnostic.SA1511.severity = warning

# A single-line comment within C# code is followed by a blank line.
dotnet_diagnostic.SA1512.severity = none

# A closing brace within a C# element, statement, or expression is not followed by a blank line.
dotnet_diagnostic.SA1513.severity = warning

# An element documentation header above a C# element is not preceded by a blank line.
dotnet_diagnostic.SA1514.severity = warning

# A single-line comment within C# code is not preceded by a blank line.
dotnet_diagnostic.SA1515.severity = none

# Adjacent C# elements are not separated by a blank line.
dotnet_diagnostic.SA1516.severity = warning

# The code file has blank lines at the start.
dotnet_diagnostic.SA1517.severity = warning

# The line endings at the end of a file do not match the settings for the project.
dotnet_diagnostic.SA1518.severity = warning

# The opening and closing braces for a multi-line C# statement have been omitted.
dotnet_diagnostic.SA1519.severity = warning

# The opening and closing braces of a chained `if`/`else if`/`else` construct were included for some clauses, but omitted for others.
dotnet_diagnostic.SA1520.severity = warning

# A C# code element is missing a documentation header.
dotnet_diagnostic.SA1600.severity = none

# A C# partial element is missing a documentation header.
dotnet_diagnostic.SA1601.severity = none

# An item within a C# enumeration is missing an Xml documentation header.
dotnet_diagnostic.SA1602.severity = none

# The Xml within a C# element's document header is badly formed.
dotnet_diagnostic.SA1603.severity = warning

# The Xml header documentation for a C# element is missing a `<summary>` tag.
dotnet_diagnostic.SA1604.severity = warning

# The `<summary>` or `<content>` tag within the documentation header for a C# code element is missing or empty.
dotnet_diagnostic.SA1605.severity = suggestion

# The `<summary>` tag within the documentation header for a C# code element is empty.
dotnet_diagnostic.SA1606.severity = suggestion

# The `<summary>` or `<content>` tag within the documentation header for a C# code element is empty.
dotnet_diagnostic.SA1607.severity = suggestion

# The `<summary>` tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element.
dotnet_diagnostic.SA1608.severity = suggestion

# The Xml header documentation for a C# property does not contain a `<value>` tag.
dotnet_diagnostic.SA1609.severity = none

# The Xml header documentation for a C# property contains an empty `<value>` tag.
dotnet_diagnostic.SA1610.severity = suggestion

# A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.
dotnet_diagnostic.SA1611.severity = none

# The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element.
dotnet_diagnostic.SA1612.severity = warning

# A `<param>` tag within a C# element's documentation header is missing a name attribute containing the name of the parameter.
dotnet_diagnostic.SA1613.severity = warning

# A `<param>` tag within a C# element's documentation header is empty.
dotnet_diagnostic.SA1614.severity = suggestion

# A C# element is missing documentation for its return value.
dotnet_diagnostic.SA1615.severity = none

# The `<returns>` tag within a C# element's documentation header is empty.
dotnet_diagnostic.SA1616.severity = none

# A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a `<returns>` tag.
dotnet_diagnostic.SA1617.severity = warning

# A generic C# element is missing documentation for one or more of its generic type parameters.
dotnet_diagnostic.SA1618.severity = suggestion

# A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a `<summary>` tag.
dotnet_diagnostic.SA1619.severity = suggestion

# The `<typeparam>` tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element.
dotnet_diagnostic.SA1620.severity = warning

# A `<typeparam>` tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute.
dotnet_diagnostic.SA1621.severity = suggestion

# A `<typeparam>` tag within the Xml header documentation for a generic C# element is empty.
dotnet_diagnostic.SA1622.severity = suggestion

# The documentation text within a C# property's `<summary>` tag does not match the accessors within the property.
dotnet_diagnostic.SA1623.severity = warning

# The documentation text within a C# property's `<summary>` tag takes into account all of the accessors within the property, but one of the accessors has limited access.
dotnet_diagnostic.SA1624.severity = warning

# The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted.
dotnet_diagnostic.SA1625.severity = warning

# The C# code contains a single-line comment which begins with three forward slashes in a row.
dotnet_diagnostic.SA1626.severity = warning

# The Xml header documentation for a C# code element contains an empty tag.
dotnet_diagnostic.SA1627.severity = suggestion

# A section of the Xml header documentation for a C# element does not begin with a capital letter.
dotnet_diagnostic.SA1628.severity = warning

# A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop).
dotnet_diagnostic.SA1629.severity = suggestion

# A section of the Xml header documentation for a C# element does not contain any whitespace between words.
dotnet_diagnostic.SA1630.severity = warning

# A section of the Xml header documentation for a C# element does not contain enough alphabetic characters.
dotnet_diagnostic.SA1631.severity = suggestion

# From StyleCop 4.5 this rule is disabled by default.
dotnet_diagnostic.SA1632.severity = none

# A C# code file is missing a standard file header.
dotnet_diagnostic.SA1633.severity = none

# The file header at the top of a C# code file is missing a copyright tag.
dotnet_diagnostic.SA1634.severity = none

# The file header at the top of a C# code file is missing copyright text.
dotnet_diagnostic.SA1635.severity = none

# The file header at the top of a C# code file does not contain the appropriate copyright text.
dotnet_diagnostic.SA1636.severity = none

# The file header at the top of a C# code file is missing the file name.
dotnet_diagnostic.SA1637.severity = none

# The file tag within the file header at the top of a C# code file does not contain the name of the file.
dotnet_diagnostic.SA1638.severity = none

# The file header at the top of a C# code file does not contain a filled-in summary tag.
dotnet_diagnostic.SA1639.severity = none

# The file header at the top of a C# code file does not contain company name text.
dotnet_diagnostic.SA1640.severity = none

# The file header at the top of a C# code file does not contain the appropriate company name text.
dotnet_diagnostic.SA1641.severity = none

# The XML documentation header for a C# constructor does not contain the appropriate summary text.
dotnet_diagnostic.SA1642.severity = none

# The Xml documentation header for a C# finalizer does not contain the appropriate summary text.
dotnet_diagnostic.SA1643.severity = none

# A section within the Xml documentation header for a C# element contains blank lines.
dotnet_diagnostic.SA1644.severity = suggestion

# An included Xml documentation file does not exist.
dotnet_diagnostic.SA1645.severity = warning

# An included Xml documentation link contains an invalid path.
dotnet_diagnostic.SA1646.severity = warning

# An include tag within an Xml documentation header does not contain valid file and path attribute.
dotnet_diagnostic.SA1647.severity = warning

# `<inheritdoc>` has been used on an element that doesn't inherit from a base class or implement an interface.
dotnet_diagnostic.SA1648.severity = warning

# The file name of a C# code file does not match the first type declared in the file.
dotnet_diagnostic.SA1649.severity = warning

# The element documentation for the element contains one or more spelling mistakes or unrecognized words.
dotnet_diagnostic.SA1650.severity = suggestion

# The documentation for the element contains one or more `<placeholder>` elements.
dotnet_diagnostic.SA1651.severity = suggestion

# This rule was moved to [SA0001](SA0001.md)
dotnet_diagnostic.SA1652.severity = none

# [SECURITY] Command Injection
dotnet_diagnostic.SCS0001.severity = warning

# [SECURITY] SQL Injection
dotnet_diagnostic.SCS0002.severity = warning

# [SECURITY] XPath Injection
dotnet_diagnostic.SCS0003.severity = warning

# [SECURITY] Certificate Validation Disabled
dotnet_diagnostic.SCS0004.severity = warning

# [SECURITY] Weak Random Number Generator
dotnet_diagnostic.SCS0005.severity = none

# [SECURITY] Weak Hashing Function
dotnet_diagnostic.SCS0006.severity = warning

# [SECURITY] XML eXternal Entity Injection (XXE)
dotnet_diagnostic.SCS0007.severity = warning

# [SECURITY] Cookie Without SSL Flag
dotnet_diagnostic.SCS0008.severity = warning

# [SECURITY] Cookie Without HttpOnly Flag
dotnet_diagnostic.SCS0009.severity = warning

# [SECURITY] Weak cipher algorithm
dotnet_diagnostic.SCS0010.severity = warning

# [SECURITY] Unsafe XSLT setting used
dotnet_diagnostic.SCS0011.severity = warning

# [SECURITY] Controller method is potentially vulnerable to authorization bypass
# NOTE: This can be disabled if there is a fallback authorization policy set to require an authentication user
dotnet_diagnostic.SCS0012.severity = warning

# [SECURITY] Potential usage of weak CipherMode mode
dotnet_diagnostic.SCS0013.severity = warning

# [SECURITY] Hardcoded Password
dotnet_diagnostic.SCS0015.severity = warning

# [SECURITY] Cross-Site Request Forgery (CSRF)
dotnet_diagnostic.SCS0016.severity = warning

# [SECURITY] Request Validation Disabled (Attribute)
dotnet_diagnostic.SCS0017.severity = warning

# [SECURITY] Path Traversal
dotnet_diagnostic.SCS0018.severity = warning

# [SECURITY] OutputCache Conflict
dotnet_diagnostic.SCS0019.severity = warning

# [SECURITY] Request Validation Disabled (Configuration File)
dotnet_diagnostic.SCS0021.severity = warning

# [SECURITY] Event Validation Disabled
dotnet_diagnostic.SCS0022.severity = warning

# [SECURITY] View State Not Encrypted
dotnet_diagnostic.SCS0023.severity = warning

# [SECURITY] View State MAC Disabled
dotnet_diagnostic.SCS0024.severity = warning

# [SECURITY] LDAP Distinguished Name Injection
dotnet_diagnostic.SCS0026.severity = warning

# [SECURITY] Open Redirect
dotnet_diagnostic.SCS0027.severity = warning

# [SECURITY] Insecure Deserialization
dotnet_diagnostic.SCS0028.severity = warning

# [SECURITY] Cross-Site Scripting (XSS)
dotnet_diagnostic.SCS0029.severity = warning

# [SECURITY] Request validation is enabled only for pages (Configuration File)
dotnet_diagnostic.SCS0030.severity = warning

# [SECURITY] LDAP Filter Injection
dotnet_diagnostic.SCS0031.severity = warning

# [SECURITY] Password RequiredLength Too Small
dotnet_diagnostic.SCS0032.severity = warning

# [SECURITY] Password Complexity
dotnet_diagnostic.SCS0033.severity = warning

# [SECURITY] Password RequiredLength Not Set
dotnet_diagnostic.SCS0034.severity = warning